{"version":3,"file":"static/js/304.7e28e491.chunk.js","mappings":"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","sources":["pages/SearchPage/components/FavoritesButton.tsx","pages/SearchPage/components/SearchField.tsx","pages/SearchPage/utils/searchFields.ts","pages/SearchPage/utils/createURL.ts","pages/SearchPage/utils/model.ts","pages/SearchPage/utils/validateInput.ts","pages/SearchPage/SearchPage.tsx"],"sourcesContent":["import { connect } from \"react-redux\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport Paths from \"routing/Paths\";\r\n\r\nimport { Button } from \"components\";\r\nimport { useFavoriteBooks } from \"hooks\";\r\nimport { thunkFetchFromFavorites } from \"js/redux/thunks/thunkFetchFromFavorites\";\r\nimport { AppDispatch, RootStateType } from \"types\";\r\n\r\nexport interface Props {\r\n    fetchFromFavorites: () => void;\r\n    isLoading: RootStateType[\"loading\"][\"isLoading\"];\r\n}\r\n\r\nexport function FavoritesButton(props: Props): JSX.Element {\r\n    const navigate = useNavigate();\r\n    const { fetchFromFavorites, isLoading } = props;\r\n    const { favoriteBooks } = useFavoriteBooks();\r\n\r\n    const processFavorites = () => {\r\n        fetchFromFavorites();\r\n        navigate(Paths.books);\r\n    };\r\n\r\n    return (\r\n        <Button disabled={!favoriteBooks.areNotEmpty() || isLoading} className=\"button--favorites\" onClick={processFavorites}>\r\n            Ulubione\r\n        </Button>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\r\n    fetchFromFavorites: () => dispatch(thunkFetchFromFavorites()),\r\n});\r\n\r\nconst mapStateToProps = (state: RootStateType) => ({\r\n    isLoading: state.loading.isLoading,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FavoritesButton);\r\n","import { MouseEvent } from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport { FieldInputProps } from \"formik\";\r\nimport { Tooltip } from \"components\";\r\n\r\nexport type props = FieldInputProps<string> & {\r\n    label: string;\r\n    isDisabled: boolean;\r\n};\r\n\r\nfunction mouseEnterHandler(event: MouseEvent<HTMLInputElement>): void {\r\n    const { target } = event;\r\n\r\n    (target as HTMLInputElement).focus();\r\n}\r\n\r\nconst SearchField = (props: props): JSX.Element => {\r\n    const { isDisabled, label, name, ...otherProps } = props;\r\n\r\n    return (\r\n        <Tooltip role=\"tooltip\" title=\"Nie mniej niż dwa znaki w tym jeden alfanumeryczny\" placement=\"top\">\r\n            <TextField disabled={isDisabled} aria-label={`input field for ${name} field`} label={label} id={name} size=\"small\" variant=\"outlined\" onMouseEnter={mouseEnterHandler} {...otherProps} />\r\n        </Tooltip>\r\n    );\r\n};\r\n\r\nexport default SearchField;\r\n","import { SearchableFields } from \"types\";\r\n\r\nexport enum Placeholders {\r\n    authors = \"Autor\",\r\n    title = \"Tytuł\",\r\n    subject = \"Etykiety\",\r\n}\r\ninterface SearchField {\r\n    name: SearchableFields;\r\n    placeholder: string;\r\n}\r\n\r\nexport const initialSearchFields: Array<SearchField> = [\r\n    { name: SearchableFields.authors, placeholder: Placeholders.authors },\r\n    { name: SearchableFields.title, placeholder: Placeholders.title },\r\n    { name: SearchableFields.subject, placeholder: Placeholders.subject },\r\n];\r\nclass SearchFields {\r\n    fields: Array<SearchField>;\r\n    constructor(fields: Array<SearchField>) {\r\n        this.fields = fields;\r\n    }\r\n    getPlaceholder(str: string) {\r\n        const field: SearchField = this.fields.filter((item: SearchField) => item.name === str)[0];\r\n\r\n        return field.placeholder;\r\n    }\r\n\r\n    get getSearchFieldsWithInitialValues() {\r\n        const result: { [key: string]: string } = {};\r\n        for (let obj in this.fields) {\r\n            result[this.fields[obj].name] = \"\";\r\n        }\r\n        return result;\r\n    }\r\n    get getFields() {\r\n        return this.fields;\r\n    }\r\n}\r\nconst searchFields = new SearchFields(initialSearchFields);\r\n\r\nexport default searchFields;\r\n","import fp from \"lodash/fp\";\r\nimport join from \"lodash/join\";\r\nimport { SearchFormValues } from \"./model\";\r\nimport { BOOK_FIELDS } from \"config\";\r\n\r\nexport interface BookSearchPattern {\r\n    inauthor: string;\r\n    intitle: string;\r\n    subject: string;\r\n}\r\n\r\n/**\r\n * builds full GoogleBooks API search link for certain book\r\n * @param searchKeys -  object with keys that further forms part of that link\r\n * @returns GoogleBooks API search link for certain book\r\n */\r\n\r\nconst createURL = (fields: SearchFormValues): string => {\r\n    const PATH = \"https://www.googleapis.com/books/v1/volumes?q=\";\r\n    const MAX_RESULTS = \"&maxResults=40\";\r\n    const START_INDEX = \"&startIndex=\";\r\n    const searchKeys = { inauthor: fields.authors, intitle: fields.title, subject: fields.subject };\r\n\r\n    const stringifyKeys = fp.flow(\r\n        fp.toPairs,\r\n        fp.filter(element => !(element[1] === \"\")),\r\n        fp.map(element => {\r\n            return join(element, \":\");\r\n        }),\r\n        fp.join(\"+\")\r\n    );\r\n\r\n    return PATH + stringifyKeys(searchKeys) + MAX_RESULTS + BOOK_FIELDS + START_INDEX;\r\n};\r\n\r\nexport default createURL;\r\n","export enum SearchPageField {\r\n    AUTHORS = \"authors\",\r\n    TITLE = \"title\",\r\n    SUBJECT = \"subject\",\r\n}\r\n\r\nexport const searchPageFieldPlaceholderMap: {\r\n    [key in SearchPageField]: string;\r\n} = {\r\n    [SearchPageField.AUTHORS]: \"Autor\",\r\n    [SearchPageField.TITLE]: \"Tytuł\",\r\n    [SearchPageField.SUBJECT]: \"Etykiety\",\r\n};\r\n\r\nexport type SearchFormValues = { [key in SearchPageField]: string };\r\n\r\nexport interface ValidationState {\r\n    message: string;\r\n    isValid: boolean;\r\n}\r\n\r\nexport const initialValues: SearchFormValues = {\r\n    [SearchPageField.AUTHORS]: \"\",\r\n    [SearchPageField.TITLE]: \"\",\r\n    [SearchPageField.SUBJECT]: \"\",\r\n};\r\n\r\nexport const initialValidationState: ValidationState = { isValid: true, message: \"\" };\r\n","import pickBy from \"lodash/pickBy\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport { initialValidationState, SearchFormValues } from \"./model\";\r\nimport { searchFields } from \".\";\r\nimport { SearchableFields } from \"types\";\r\n\r\ninterface resultType {\r\n    isValid: boolean;\r\n    message: string;\r\n}\r\n/**\r\n * validates input fields content.\r\n * @param fields -  object with keys and valuesthat further forms part of that link\r\n * @returns object with validation result and error message\r\n */\r\nconst validateInput = (fields: SearchFormValues) => {\r\n    let validationResult: resultType = initialValidationState;\r\n    let message: string[] = [];\r\n\r\n    const test = (item: string): boolean => {\r\n        return item.length >= 2 && /\\d|[A-z]/.test(item);\r\n    };\r\n\r\n    const searchKeys: { [index in SearchableFields as string]: string } = pickBy(fields);\r\n\r\n    if (!isEmpty(searchKeys)) {\r\n        for (let key in searchKeys) {\r\n            if (test(searchKeys[key]) === false) {\r\n                const label = searchFields.getPlaceholder(key);\r\n                validationResult = { isValid: false, message: \"Nieprawidłowe dane w polu \" + label };\r\n                message.push(label);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (validationResult.isValid === false) validationResult.message = \"Nieprawidłowe wartości w polach: \" + message.join(\", \");\r\n\r\n    return validationResult;\r\n};\r\n\r\nexport default validateInput;\r\n","import * as React from \"react\";\r\n\r\nimport { useFormik } from \"formik\";\r\nimport { useTypedSelector } from \"hooks/useTypedSelector\";\r\nimport { shallowEqual, useSelector } from \"react-redux\";\r\nimport { FavoriteButton, SearchField } from \"./components\";\r\nimport { validateInput, createURL } from \"./utils\";\r\nimport { Alert, Button, LogoFactory } from \"components\";\r\nimport { useFetchBooks } from \"hooks/useFetchBooks\";\r\nimport { BookForm, PageContainer, SearchButtons, SearchInputs } from \"pages/styled\";\r\nimport { SearchFormValues, SearchPageField, searchPageFieldPlaceholderMap, initialValues, initialValidationState } from \"./utils/model\";\r\nimport { isOnlineSelector } from \"js/redux/reducers/onlineReducer\";\r\n\r\nexport const SearchPage = () => {\r\n    const [validated, setValidated] = React.useState(initialValidationState);\r\n    const [URL, setURL] = React.useState(\"\");\r\n\r\n    const isLoading = useTypedSelector(state => state.loading.isLoading, shallowEqual);\r\n    const isOnline = useSelector(isOnlineSelector);\r\n    const fetchBooksFromAPI = useFetchBooks();\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n\r\n    const { values, handleSubmit, getFieldProps, handleReset } = useFormik({\r\n        initialValues,\r\n        onSubmit(formValues: SearchFormValues) {\r\n            const isValidated = validateInput(formValues);\r\n            setValidated(isValidated);\r\n            if (isValidated.isValid) {\r\n                setURL(createURL(formValues));\r\n            }\r\n        },\r\n    });\r\n\r\n    const isFormEmpty = React.useCallback(() => {\r\n        return Object.values(values).join(\"\") === \"\";\r\n    }, [values]);\r\n\r\n    const clearFormAndValidation: React.MouseEventHandler<HTMLButtonElement> = React.useCallback(() => {\r\n        setValidated(initialValidationState);\r\n        handleReset(null);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        let controller = new AbortController();\r\n        if (URL) {\r\n            fetchBooksFromAPI(URL, controller);\r\n        }\r\n        return () => controller?.abort();\r\n    }, [URL, fetchBooksFromAPI]);\r\n\r\n    return (\r\n        <>\r\n            <PageContainer maxWidth={false} disableGutters={true} sx={{ alignItems: \"unset\" }}>\r\n                <LogoFactory />\r\n                <Alert shouldRender={!validated.isValid} alertMessage={validated.message} />\r\n                <BookForm id=\"search__form\">\r\n                    <SearchInputs>\r\n                        {Object.values(SearchPageField).map((fieldName: SearchPageField) => (\r\n                            <SearchField key={fieldName} isDisabled={isLoading} label={searchPageFieldPlaceholderMap[fieldName]} {...getFieldProps(fieldName)} />\r\n                        ))}\r\n                    </SearchInputs>\r\n                    <SearchButtons>\r\n                        <Button form=\"search__form\" disabled={isLoading || isFormEmpty() || !isOnline} onClick={handleSubmit as unknown as React.MouseEventHandler<HTMLButtonElement>} className=\"button--ok\" type=\"submit\">\r\n                            Szukaj\r\n                        </Button>\r\n\r\n                        <Button disabled={isLoading || isFormEmpty()} onClick={clearFormAndValidation} className=\"button--problem\" type=\"reset\">\r\n                            Wyczyść\r\n                        </Button>\r\n\r\n                        <FavoriteButton />\r\n                    </SearchButtons>\r\n                </BookForm>\r\n            </PageContainer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SearchPage;\r\n"],"names":["connect","state","isLoading","loading","dispatch","fetchFromFavorites","thunkFetchFromFavorites","props","navigate","useNavigate","favoriteBooks","useFavoriteBooks","disabled","areNotEmpty","className","onClick","Paths","books","mouseEnterHandler","event","target","focus","Placeholders","isDisabled","label","name","otherProps","role","title","placement","TextField","id","size","variant","onMouseEnter","fields","searchKeys","inauthor","authors","intitle","subject","fp","element","join","stringifyKeys","BOOK_FIELDS","SearchPageField","initialSearchFields","SearchableFields","placeholder","this","str","filter","item","result","obj","searchPageFieldPlaceholderMap","AUTHORS","TITLE","SUBJECT","initialValues","initialValidationState","isValid","message","validationResult","pickBy","isEmpty","key","length","test","searchFields","getPlaceholder","push","React","validated","setValidated","URL","setURL","useTypedSelector","shallowEqual","isOnline","useSelector","isOnlineSelector","fetchBooksFromAPI","useFetchBooks","useFormik","onSubmit","formValues","isValidated","validateInput","createURL","values","handleSubmit","getFieldProps","handleReset","isFormEmpty","Object","clearFormAndValidation","controller","AbortController","abort","maxWidth","disableGutters","sx","alignItems","shouldRender","alertMessage","map","fieldName","form","type"],"sourceRoot":""}