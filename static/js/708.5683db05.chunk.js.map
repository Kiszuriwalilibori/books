{"version":3,"file":"static/js/708.5683db05.chunk.js","mappings":"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","sources":["Pages/SearchPage/styles.ts","Pages/SearchPage/components/FavoritesButton.tsx","js/redux/thunks/thunkFetchFromFavorites.ts","Pages/SearchPage/components/Logo.tsx","Pages/SearchPage/components/TextFieldWithTooltip.tsx","Pages/SearchPage/utils/model.ts","Pages/SearchPage/utils/createFullPathToAPI.ts","Pages/SearchPage/utils/prefixSearchFormInput.tsx","Pages/SearchPage/utils/validateInput.ts","Pages/SearchPage/SearchPage.tsx"],"sourcesContent":["import { makeStyles } from \"@mui/styles\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        flexWrap: \"wrap\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n\r\n        \"& .MuiTextField-root\": {\r\n            margin: \"8px\",\r\n            width: \"25ch\",\r\n            boxShadow: \"0 1px 1px rgba(0,0,0,0.08), 0 2px 2px rgba(0,0,0,0.12), 0 4px 4px rgba(0,0,0,0.16),0 8px 8px rgba(0,0,0,0.20);\",\r\n        },\r\n        \"& .MuiInputBase-root\": {\r\n            color: \"white !important\",\r\n            fontFamily: \"Open Sans, sans-serif !important\",\r\n            backgroundColor: \"rgba(122, 194, 33, 0.8)\",\r\n        },\r\n        \"& .MuiFormLabel-root\": { color: \"white !important\", fontFamily: \"Montserrat\" },\r\n        \"& .MuiOutlinedInput-notchedOutline\": {\r\n            border: \"3px solid\",\r\n            borderColor: \"rgb(122, 194, 33)!important\",\r\n        },\r\n    },\r\n}));\r\n\r\nexport default useStyles;\r\n","import { connect } from \"react-redux\";\r\n\r\nimport { Button } from \"components\";\r\nimport { useFavorites, useCreateRedirect } from \"hooks\";\r\nimport { thunkFetchFromFavorites } from \"js/redux/thunks/thunkFetchFromFavorites\";\r\nimport { AppDispatch } from \"types\";\r\n\r\nexport interface Props {\r\n    fetchFromFavorites: () => void;\r\n}\r\n\r\nexport function FavoritesButton(props: Props): JSX.Element {\r\n    const redirect = useCreateRedirect();\r\n    const { fetchFromFavorites } = props;\r\n    const { favorites } = useFavorites();\r\n\r\n    const processFavorites = () => {\r\n        fetchFromFavorites();\r\n        redirect.books();\r\n    };\r\n\r\n    return (\r\n        <Button disabled={!favorites.containsBooks()} className=\"button--favorites\" onClick={processFavorites}>\r\n            Ulubione\r\n        </Button>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\r\n    fetchFromFavorites: () => dispatch(thunkFetchFromFavorites()),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(FavoritesButton);\r\n","import { ThunkAction } from \"redux-thunk\";\r\nimport { AnyAction } from \"redux\";\r\n\r\nimport { RootStateType } from \"types\";\r\nimport { FilteredStorage, ReformatFetchedBooks } from \"js/utils\";\r\nimport { fetchBooksFromFavorites, setIsFromNetwork } from \"../actionCreators\";\r\n\r\nexport function thunkFetchFromFavorites(): ThunkAction<void, RootStateType, unknown, AnyAction> {\r\n    return async dispatch => {\r\n        const favorites = new FilteredStorage(item => item.kind === \"books#volume\");\r\n        const result = { data: ReformatFetchedBooks.Run(favorites.getAllItems()) };\r\n\r\n        dispatch(fetchBooksFromFavorites(result));\r\n        dispatch(setIsFromNetwork(false));\r\n    };\r\n}\r\n","import * as React from 'react';\r\n\r\nconst Logo = React.memo(() => <header className=\"search__logo\">Google Books Finder</header>);\r\n\r\nexport default Logo;\r\n","import React, { MouseEvent } from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport { FieldInputProps } from \"formik\";\r\nimport { Tooltip } from \"components\";\r\n\r\nexport type props = FieldInputProps<string> & {\r\n    label: string;\r\n};\r\n\r\nfunction onTextFieldHover(event: MouseEvent<HTMLInputElement>): void {\r\n    const { target } = event;\r\n\r\n    (target as HTMLInputElement).focus();\r\n}\r\n\r\nconst TextFieldWithTooltip = (props: props): JSX.Element => {\r\n    const { label, ...otherProps } = props;\r\n\r\n    return (\r\n        <Tooltip title=\"Nie mniej niż dwa znaki w tym jeden alfanumeryczny\" arrow /*placement=\"bottom-end\"*/>\r\n            <TextField label={label} id={props.name} size=\"small\" variant=\"outlined\" onMouseEnter={onTextFieldHover} {...otherProps} />\r\n        </Tooltip>\r\n    );\r\n};\r\n\r\nexport default TextFieldWithTooltip;\r\n","export enum SearchPageField {\r\n    AUTHORS = \"authors\",\r\n    TITLE = \"title\",\r\n    SUBJECT = \"subject\",\r\n}\r\n\r\nexport const searchPageFieldPlaceholderMap: {\r\n    [key in SearchPageField]: string;\r\n} = {\r\n    [SearchPageField.AUTHORS]: \"Autor\",\r\n    [SearchPageField.TITLE]: \"Tytuł\",\r\n    [SearchPageField.SUBJECT]: \"Etykiety\",\r\n};\r\n\r\nexport type SearchFormValues = { [key in SearchPageField]: string };\r\n\r\nexport interface ValidationState {\r\n    message: string;\r\n    valid: boolean;\r\n}\r\n\r\nexport const initialValues: SearchFormValues = {\r\n    [SearchPageField.AUTHORS]: \"\",\r\n    [SearchPageField.TITLE]: \"\",\r\n    [SearchPageField.SUBJECT]: \"\",\r\n};\r\n\r\nexport const initialValidationState = { valid: true, message: \"\" };\r\n","import fp from \"lodash/fp\";\r\nimport join from \"lodash/join\";\r\n\r\nexport interface BookSearchPattern {\r\n  inauthor: string;\r\n  intitle: string;\r\n  subject: string;\r\n}\r\n/**\r\n * builds full GoogleBooks API search link for certain book\r\n * @param keysObject -  object with keys that further forms part of that link\r\n * @returns GoogleBooks API search link for certain book\r\n */\r\nconst createFullPathToAPI = (keysObject: BookSearchPattern): string => {\r\n  const path = \"https://www.googleapis.com/books/v1/volumes?q=\";\r\n  const maxResults = \"&maxResults=40\";\r\n  const startIndex = \"&startIndex=\";\r\n  const searchInputTransformation = fp.flow(\r\n    fp.toPairs,\r\n    fp.filter(element => !(element[1] === \"\")),\r\n    fp.map(element => {\r\n      return join(element, \":\");\r\n    }),\r\n    fp.join(\"+\")\r\n  );\r\n\r\n  return path + searchInputTransformation(keysObject) + maxResults + startIndex;\r\n};\r\n\r\nexport default createFullPathToAPI;\r\n","import { BookSearchPattern } from \"./createFullPathToAPI\";\r\nimport { SearchFormValues } from \"./model\";\r\n\r\n/**\r\n * builds object with fields named as required by GoogleBooks API and only those.\r\n * @param fields -  object with keys that further forms part of that link\r\n * @returns GoogleBooks API search link for certain book\r\n */\r\nconst prefixSearchFormInput = (fields: SearchFormValues): BookSearchPattern => {\r\n    return { inauthor: fields.authors, intitle: fields.title, subject: fields.subject };\r\n};\r\n\r\nexport default prefixSearchFormInput;\r\n","import pickBy from \"lodash/pickBy\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport { initialValidationState, SearchFormValues } from \"./model\";\r\nimport { searchFields } from \"js/utils\";\r\nimport { SearchableFields } from \"types\";\r\n\r\ninterface resultType {\r\n    valid: boolean;\r\n    message: string;\r\n}\r\n/**\r\n * validates input fields content.\r\n * @param fields -  object with keys and valuesthat further forms part of that link\r\n * @returns object with validation result and error message\r\n */\r\nconst validateInput = (fields: SearchFormValues) => {\r\n    let result: resultType = initialValidationState;\r\n    let message: string[] = [];\r\n\r\n    const test = (item: string): boolean => {\r\n        return item.length >= 2 && /\\d|[A-z]/.test(item);\r\n    };\r\n\r\n    const filteredState: { [index in SearchableFields as string]: string } = pickBy(fields);\r\n\r\n    if (!isEmpty(filteredState)) {\r\n        for (let stateItemKey in filteredState) {\r\n            if (test(filteredState[stateItemKey]) === false) {\r\n                const label = searchFields.getPlaceholder(stateItemKey);\r\n                result = { valid: false, message: \"Nieprawidłowe dane w polu \" + label };\r\n                message.push(label);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (result.valid === false) result.message = \"Nieprawidłowe wartości w polach: \" + message.join(\", \");\r\n\r\n    return result;\r\n};\r\n\r\nexport default validateInput;\r\n","import * as React from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useFormik } from \"formik\";\r\n\r\nimport { fetchBooksFromAPI, createRedirect } from \"js/utils\";\r\n\r\nimport useStyles from \"./styles\";\r\nimport Paths from \"Routing/Paths\";\r\n\r\nimport { FakeHeader, PageContainer } from \"components\";\r\nimport { FavoriteButton, Logo, TextFieldWithTooltip } from \"./components\";\r\nimport { validateInput, createFullPathToAPI, prefixSearchFormInput } from \"./utils\";\r\nimport { Alert, Button } from \"components\";\r\nimport { withSnackBarHOC } from \"HOCs\";\r\nimport { SearchFormValues, SearchPageField, searchPageFieldPlaceholderMap, initialValues, initialValidationState } from \"./utils/model\";\r\n\r\nexport const SearchPage = () => {\r\n    const classes = useStyles();\r\n    const [validated, setValidated] = React.useState(initialValidationState);\r\n    const history = useNavigate();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    const redirect = React.useMemo(createRedirect(history), [history]);\r\n    const { values, handleSubmit, getFieldProps, handleReset } = useFormik({\r\n        initialValues,\r\n        onSubmit(formValues: SearchFormValues) {\r\n            const isValidated = validateInput(formValues);\r\n            setValidated(isValidated);\r\n            if (isValidated.valid) {\r\n                history(Paths.connecting);\r\n                fetchBooksFromAPI(createFullPathToAPI(prefixSearchFormInput(formValues)), redirect);\r\n            }\r\n        },\r\n    });\r\n\r\n    const areButtonsDisabled = React.useCallback(() => {\r\n        return Object.values(values).join(\"\") === \"\";\r\n    }, [values]);\r\n\r\n    const clearFormAndValidation: React.MouseEventHandler<HTMLButtonElement> = React.useCallback(() => {\r\n        setValidated(initialValidationState);\r\n        handleReset(null);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <FakeHeader text=\"Search Page\" />\r\n            <PageContainer maxWidth={false} disableGutters={true} sx={{ alignItems: \"unset\" }}>\r\n                <Logo />\r\n                <Alert renderCondition={!validated.valid} message={validated.message} />\r\n                <form className={classes.root} id=\"search__form\">\r\n                    <div className=\"search__inputs\">\r\n                        {Object.values(SearchPageField).map((fieldName: SearchPageField) => (\r\n                            <TextFieldWithTooltip key={fieldName} label={searchPageFieldPlaceholderMap[fieldName]} {...getFieldProps(fieldName)} />\r\n                        ))}\r\n                    </div>\r\n                    <div className=\"search__buttons\">\r\n                        <Button form=\"search__form\" disabled={areButtonsDisabled()} onClick={handleSubmit as unknown as React.MouseEventHandler<HTMLButtonElement>} className=\"button--ok\" type=\"submit\">\r\n                            Szukaj\r\n                        </Button>\r\n\r\n                        <Button disabled={areButtonsDisabled()} onClick={clearFormAndValidation} className=\"button--problem\" type=\"reset\">\r\n                            Wyczyść\r\n                        </Button>\r\n\r\n                        <FavoriteButton />\r\n                    </div>\r\n                </form>\r\n                {/* <div className=\"search__buttons\">\r\n                    <Button form=\"search__form\" disabled={areButtonsDisabled()} onClick={handleSubmit as unknown as React.MouseEventHandler<HTMLButtonElement>} className=\"button--ok\" type=\"submit\">\r\n                        Szukaj\r\n                    </Button>\r\n\r\n                    <Button disabled={areButtonsDisabled()} onClick={clearFormAndValidation} className=\"button--problem\" type=\"reset\">\r\n                        Wyczyść\r\n                    </Button>\r\n\r\n                    <FavoriteButton />\r\n                </div> */}\r\n            </PageContainer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default connect(null, null)(withSnackBarHOC(SearchPage));\r\n"],"names":["makeStyles","theme","root","display","flexDirection","flexWrap","justifyContent","alignItems","margin","width","boxShadow","color","fontFamily","backgroundColor","border","borderColor","connect","dispatch","fetchFromFavorites","favorites","FilteredStorage","item","kind","result","data","ReformatFetchedBooks","Run","getAllItems","fetchBooksFromFavorites","setIsFromNetwork","props","redirect","useCreateRedirect","useFavorites","disabled","containsBooks","className","onClick","books","React","onTextFieldHover","event","target","focus","SearchPageField","label","otherProps","title","arrow","TextField","id","name","size","variant","onMouseEnter","keysObject","fp","element","join","searchInputTransformation","path","fields","inauthor","authors","intitle","subject","searchPageFieldPlaceholderMap","AUTHORS","TITLE","SUBJECT","initialValues","initialValidationState","valid","message","filteredState","pickBy","isEmpty","stateItemKey","length","test","searchFields","getPlaceholder","push","withSnackBarHOC","classes","useStyles","validated","setValidated","history","useNavigate","createRedirect","useFormik","onSubmit","formValues","isValidated","validateInput","Paths","connecting","fetchBooksFromAPI","createFullPathToAPI","prefixSearchFormInput","values","handleSubmit","getFieldProps","handleReset","areButtonsDisabled","Object","clearFormAndValidation","text","maxWidth","disableGutters","sx","renderCondition","map","fieldName","form","type"],"sourceRoot":""}