{"version":3,"file":"static/js/488.af026e93.chunk.js","mappings":"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","sources":["pages/SearchPage/components/FavoritesButton.tsx","js/redux/thunks/thunkFetchFromFavorites.ts","pages/SearchPage/components/SearchField.tsx","pages/SearchPage/utils/searchFields.ts","pages/SearchPage/utils/validateInput.ts","pages/SearchPage/components/SearchForm.tsx","pages/SearchPage/SearchPage.tsx","pages/SearchPage/utils/createURL.ts"],"sourcesContent":["// import { connect } from \"react-redux\";\r\n// import { useCallback } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n\r\n// import Paths from \"routing\";\r\n\r\n// import { Button } from \"components\";\r\n// import { useFavoriteBooks } from \"hooks\";\r\n// import { thunkFetchFromFavorites } from \"js/redux/thunks/thunkFetchFromFavorites\";\r\n// import { AppDispatch, RootStateType } from \"types\";\r\n\r\n// export interface Props {\r\n//     fetchFromFavorites: () => void;\r\n//     isLoading: RootStateType[\"loading\"][\"isLoading\"];\r\n// }\r\n\r\n// export function FavoritesButton(props: Props): JSX.Element {\r\n//     const navigate = useNavigate();\r\n//     const { fetchFromFavorites, isLoading } = props;\r\n//     const { favoriteBooks } = useFavoriteBooks();\r\n\r\n//     const processFavorites = useCallback(() => {\r\n//         fetchFromFavorites();\r\n//         navigate(Paths.books);\r\n//     }, [fetchFromFavorites, navigate]);\r\n\r\n//     return (\r\n//         <Button disabled={!favoriteBooks.areNotEmpty() || isLoading} className=\"button--favorites\" onClick={processFavorites}>\r\n//             Ulubione\r\n//         </Button>\r\n//     );\r\n// }\r\n\r\n// const mapDispatchToProps = (dispatch: AppDispatch) => ({\r\n//     fetchFromFavorites: () => dispatch(thunkFetchFromFavorites()),\r\n// });\r\n\r\n// const mapStateToProps = (state: RootStateType) => ({\r\n//     isLoading: state.loading.isLoading,\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(FavoritesButton);\r\nimport { connect } from \"react-redux\";\r\nimport { useCallback } from \"react\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport Paths from \"routing\";\r\n\r\nimport { Button } from \"components\";\r\nimport { useFavoriteBooks } from \"hooks\";\r\nimport { thunkFetchFromFavorites } from \"js/redux/thunks/thunkFetchFromFavorites\";\r\nimport { AppDispatch, RootStateType } from \"types\";\r\n\r\nexport interface Props {\r\n    fetchFromFavorites: () => void;\r\n    isLoading: RootStateType[\"loading\"][\"isLoading\"];\r\n}\r\n\r\nexport function FavoritesButton(props: Props): JSX.Element {\r\n    const navigate = useNavigate();\r\n    const { fetchFromFavorites, isLoading } = props;\r\n    const { favoriteBooks } = useFavoriteBooks();\r\n\r\n    const processFavorites = useCallback(() => {\r\n        fetchFromFavorites();\r\n        navigate(Paths.books);\r\n    }, [fetchFromFavorites, navigate]);\r\n\r\n    return (\r\n        <Button disabled={!favoriteBooks.areNotEmpty() || isLoading} className=\"button--favorites\" onClick={processFavorites}>\r\n            Ulubione\r\n        </Button>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\r\n    fetchFromFavorites: () => dispatch(thunkFetchFromFavorites()),\r\n});\r\n\r\nconst mapStateToProps = (state: RootStateType) => ({\r\n    isLoading: state.loading.isLoading,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FavoritesButton);\r\n","import { ThunkAction } from \"redux-thunk\";\r\nimport { AnyAction } from \"redux\";\r\n\r\nimport { RootStateType } from \"types\";\r\nimport { FilteredStorage } from \"js/utils\";\r\nimport { storeBooks, setIsFromNetwork, showError } from \"../actionCreators\";\r\nimport { FAVORITE_BOOK_IDENTIFIER } from \"config\";\r\n\r\nexport function thunkFetchFromFavorites(): ThunkAction<void, RootStateType, unknown, AnyAction> {\r\n    return dispatch => {\r\n        try {\r\n            const favorites = new FilteredStorage(item => item.kind === FAVORITE_BOOK_IDENTIFIER);\r\n            const booksRetrievedFromFavorites = favorites.getAll();\r\n            dispatch(storeBooks(booksRetrievedFromFavorites));\r\n            dispatch(setIsFromNetwork(false));\r\n        } catch (error) {\r\n            const errorMessage = error instanceof Error ? error.message : \"Podczas próby pobrania ulubionych wystąpił błąd\";\r\n            dispatch(\r\n                showError({\r\n                    isError: true,\r\n                    errorMessage: errorMessage,\r\n                })\r\n            );\r\n        }\r\n    };\r\n}\r\n","import TextField from \"@mui/material/TextField\";\r\nimport { FieldInputProps } from \"formik\";\r\nimport { memo, useMemo } from \"react\";\r\nimport { Tooltip } from \"components\";\r\nimport { FieldValidationError } from \"../utils/model\";\r\n\r\nexport interface SearchFieldProps extends FieldInputProps<string> {\r\n    label: string;\r\n    isDisabled: boolean;\r\n    fieldErrors?: FieldValidationError[];\r\n}\r\n\r\nconst SearchField = memo((props: SearchFieldProps): JSX.Element => {\r\n    const { isDisabled, label, name, fieldErrors, ...otherProps } = props;\r\n\r\n    // Find errors specific to this field\r\n    const currentFieldErrors = useMemo(() => {\r\n        return fieldErrors?.find(error => error.field === name);\r\n    }, [fieldErrors, name]);\r\n\r\n    const hasErrors = Boolean(currentFieldErrors && currentFieldErrors.errors.length > 0);\r\n\r\n    // Create detailed tooltip content\r\n    const tooltipContent = useMemo(() => {\r\n        let content = \"Wymagania:\\n• Minimum 2 znaki\\n• Co najmniej jedna litera lub cyfra\\n• Bez spacji na początku i końcu\";\r\n\r\n        if (hasErrors) {\r\n            content += `\\n\\nBłędy w tym polu:\\n${currentFieldErrors!.errors.map(error => `• ${error}`).join(\"\\n\")}`;\r\n        }\r\n\r\n        return content;\r\n    }, [hasErrors, currentFieldErrors]);\r\n\r\n    // No helper text - we only show errors in the ValidationAlert\r\n\r\n    return (\r\n        <Tooltip role=\"tooltip\" title={tooltipContent} placement=\"top\" arrow>\r\n            <TextField disabled={isDisabled} aria-label={`input field for ${name} field`} label={label} id={name} size=\"small\" variant=\"outlined\" {...otherProps} />\r\n        </Tooltip>\r\n    );\r\n});\r\n\r\nSearchField.displayName = \"SearchField\";\r\n\r\nexport default SearchField;\r\n","import { SearchableFields } from \"types\";\r\n\r\nexport enum Placeholders {\r\n    authors = \"Autor\",\r\n    title = \"Tytuł\",\r\n    subject = \"Etykiety\",\r\n}\r\ninterface SearchField {\r\n    name: SearchableFields;\r\n    placeholder: string;\r\n}\r\n\r\nexport const initialSearchFields: Array<SearchField> = [\r\n    { name: SearchableFields.authors, placeholder: Placeholders.authors },\r\n    { name: SearchableFields.title, placeholder: Placeholders.title },\r\n    { name: SearchableFields.subject, placeholder: Placeholders.subject },\r\n];\r\nclass SearchFields {\r\n    fields: Array<SearchField>;\r\n    constructor(fields: Array<SearchField>) {\r\n        this.fields = fields;\r\n    }\r\n    getPlaceholder(str: string) {\r\n        const field: SearchField = this.fields.filter((item: SearchField) => item.name === str)[0];\r\n\r\n        return field.placeholder;\r\n    }\r\n\r\n    get getSearchFieldsWithInitialValues() {\r\n        const result: { [key: string]: string } = {};\r\n        for (let obj in this.fields) {\r\n            result[this.fields[obj].name] = \"\";\r\n        }\r\n        return result;\r\n    }\r\n    get getFields() {\r\n        return this.fields;\r\n    }\r\n}\r\nconst searchFields = new SearchFields(initialSearchFields);\r\n\r\nexport default searchFields;\r\n","import pickBy from \"lodash/pickBy\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport { initialValidationState, SearchFormValues, FieldValidationError, SearchPageField, searchPageFieldPlaceholderMap } from \"./model\";\r\nimport { SearchableFields } from \"types\";\r\n\r\ninterface ValidationResult {\r\n    isValid: boolean;\r\n    message: string;\r\n    fieldErrors?: FieldValidationError[];\r\n}\r\n\r\n/**\r\n * Validates individual field value and returns detailed error information\r\n * @param value - field value to validate\r\n * @returns array of specific validation errors\r\n */\r\nconst validateFieldValue = (value: string): string[] => {\r\n    const errors: string[] = [];\r\n\r\n    if (value.length === 0) {\r\n        return errors; // Empty fields are allowed, skip validation\r\n    }\r\n\r\n    if (value.length === 1) {\r\n        errors.push(\"musi zawierać co najmniej 2 znaki\");\r\n    }\r\n\r\n    if (!/[A-Za-z0-9]/.test(value)) {\r\n        errors.push(\"musi zawierać co najmniej jeden znak alfanumeryczny (litera lub cyfra)\");\r\n    }\r\n\r\n    if (value.trim() !== value) {\r\n        errors.push(\"nie może zaczynać się ani kończyć spacją\");\r\n    }\r\n\r\n    if (/^\\s*$/.test(value) && value.length > 0) {\r\n        errors.push(\"nie może składać się tylko z białych znaków\");\r\n    }\r\n\r\n    // Check for potentially problematic characters\r\n    if (/[<>{}[\\]\\\\]/.test(value)) {\r\n        errors.push(\"zawiera niedozwolone znaki specjalne\");\r\n    }\r\n\r\n    return errors;\r\n};\r\n\r\n/**\r\n * Get field label for display purposes\r\n * @param fieldName - field name from SearchPageField\r\n * @returns human-readable field label\r\n */\r\nconst getFieldLabel = (fieldName: string): string => {\r\n    return searchPageFieldPlaceholderMap[fieldName as SearchPageField] || fieldName;\r\n};\r\n\r\n/**\r\n * Creates detailed validation message based on field errors\r\n * @param fieldErrors - array of field validation errors\r\n * @returns formatted error message\r\n */\r\nconst createDetailedMessage = (fieldErrors: FieldValidationError[]): string => {\r\n    if (fieldErrors.length === 0) return \"\";\r\n\r\n    let message = \"Błędy walidacji:\\n\";\r\n\r\n    fieldErrors.forEach((fieldError, index) => {\r\n        const fieldLabel = getFieldLabel(fieldError.field);\r\n        message += `\\n${index + 1}. Pole \"${fieldLabel}\"`;\r\n\r\n        if (fieldError.value.length > 20) {\r\n            message += ` (wartość: \"${fieldError.value.substring(0, 20)}...\")`;\r\n        } else {\r\n            message += ` (wartość: \"${fieldError.value}\")`;\r\n        }\r\n\r\n        fieldError.errors.forEach((error, errorIndex) => {\r\n            message += `\\n   • ${error}`;\r\n        });\r\n    });\r\n\r\n    message += \"\\n\\nWymagania dla wszystkich pól:\";\r\n    message += \"\\n• Minimum 2 znaki\";\r\n    message += \"\\n• Co najmniej jedna litera lub cyfra\";\r\n    message += \"\\n• Bez spacji na początku i końcu\";\r\n\r\n    return message;\r\n};\r\n\r\n/**\r\n * validates input fields content with detailed error reporting.\r\n * @param fields -  object with keys and values that further forms part of that link\r\n * @returns object with validation result, error message, and detailed field errors\r\n */\r\nexport const validateInput = (fields: SearchFormValues): ValidationResult => {\r\n    let validationResult: ValidationResult = { ...initialValidationState };\r\n    const fieldErrors: FieldValidationError[] = [];\r\n\r\n    const nonEmptyFields: { [index in SearchableFields as string]: string } = pickBy(fields);\r\n\r\n    if (!isEmpty(nonEmptyFields)) {\r\n        for (const key in nonEmptyFields) {\r\n            const fieldValue = nonEmptyFields[key];\r\n            const errors = validateFieldValue(fieldValue);\r\n\r\n            if (errors.length > 0) {\r\n                fieldErrors.push({\r\n                    field: key,\r\n                    value: fieldValue,\r\n                    errors: errors,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    if (fieldErrors.length > 0) {\r\n        const simpleMessage = `Nieprawidłowe wartości w polach: ${fieldErrors.map(fe => getFieldLabel(fe.field)).join(\", \")}`;\r\n        const detailedMessage = createDetailedMessage(fieldErrors);\r\n\r\n        validationResult = {\r\n            isValid: false,\r\n            message: simpleMessage,\r\n            fieldErrors: fieldErrors,\r\n        };\r\n\r\n        // Log detailed message to console for debugging\r\n        console.group(\"🔍 Szczegóły błędów walidacji:\");\r\n        console.log(detailedMessage);\r\n        console.table(\r\n            fieldErrors.map(fe => ({\r\n                Pole: getFieldLabel(fe.field),\r\n                Wartość: fe.value,\r\n                Błędy: fe.errors.join(\"; \"),\r\n            }))\r\n        );\r\n        console.groupEnd();\r\n    }\r\n\r\n    return validationResult;\r\n};\r\n","import React, { useCallback } from \"react\";\nimport { useFormik } from \"formik\";\nimport uuid from \"react-uuid\";\n\nimport { Button, ValidationAlert } from \"components\";\nimport { BookForm, SearchButtons, SearchInputs } from \"pages/styled\";\nimport { SearchField, FavoriteButton } from \"./\";\nimport { SearchFormValues, SearchPageField, searchPageFieldPlaceholderMap, initialValues, initialValidationState, ValidationState } from \"../utils/model\";\nimport { validateInput } from \"../utils\";\n\ninterface SearchFormProps {\n    isLoading: boolean;\n    isOnline: boolean;\n    onSubmit: (values: SearchFormValues) => void;\n    onValidationChange: (validation: ValidationState) => void;\n}\n\nexport const SearchForm: React.FC<SearchFormProps> = ({ isLoading, isOnline, onSubmit, onValidationChange }) => {\n    const formID = uuid();\n    const [validated, setValidated] = React.useState(initialValidationState);\n\n    const handleCloseValidationAlert = () => {\n        setValidated(initialValidationState);\n        onValidationChange(initialValidationState);\n    };\n\n    const { values, handleSubmit, getFieldProps, handleReset } = useFormik({\n        initialValues,\n        onSubmit: (formValues: SearchFormValues) => {\n            const validationResult = validateInput(formValues);\n            setValidated(validationResult);\n            onValidationChange(validationResult);\n\n            if (validationResult.isValid) {\n                onSubmit(formValues);\n            }\n        },\n    });\n\n    const isFormEmpty = useCallback(() => {\n        return Object.values(values).join(\"\") === \"\";\n    }, [values]);\n\n    const clearFormAndValidation = useCallback(() => {\n        setValidated(initialValidationState);\n        onValidationChange(initialValidationState);\n        handleReset(null);\n    }, [handleReset, onValidationChange]);\n\n    return (\n        <>\n            <ValidationAlert shouldRender={!validated.isValid} alertMessage={validated.message} fieldErrors={validated.fieldErrors} onClose={handleCloseValidationAlert} />\n            <BookForm id={formID}>\n                <SearchInputs>\n                    {Object.values(SearchPageField).map((fieldName: SearchPageField) => (\n                        <SearchField key={fieldName} isDisabled={isLoading} label={searchPageFieldPlaceholderMap[fieldName]} fieldErrors={validated.fieldErrors} {...getFieldProps(fieldName)} />\n                    ))}\n                </SearchInputs>\n                <SearchButtons>\n                    <Button form={formID} disabled={isLoading || isFormEmpty() || !isOnline} onClick={handleSubmit as unknown as React.MouseEventHandler<HTMLButtonElement>} className=\"button--ok\" type=\"submit\">\n                        Szukaj\n                    </Button>\n                    <Button disabled={isLoading || isFormEmpty()} onClick={clearFormAndValidation} className=\"button--problem\" type=\"reset\">\n                        Wyczyść\n                    </Button>\n                    <FavoriteButton />\n                </SearchButtons>\n            </BookForm>\n        </>\n    );\n};\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport { shallowEqual, useSelector } from \"react-redux\";\r\n\r\nimport { useTypedSelector } from \"hooks/useTypedSelector\";\r\nimport { SearchForm } from \"./components/SearchForm\";\r\nimport { createURL } from \"./utils\";\r\nimport { LogoFactory } from \"components\";\r\n\r\nimport { PageContainer } from \"pages/styled\";\r\nimport { SearchFormValues, initialValidationState, ValidationState } from \"./utils/model\";\r\nimport { isOnlineSelector } from \"js/redux/reducers/onlineReducer\";\r\nimport { useFetchBooks } from \"hooks\";\r\n\r\nexport const SearchPage = () => {\r\n    const [validated, setValidated] = useState(initialValidationState);\r\n    const [URL, setURL] = useState(\"\");\r\n\r\n    const isLoading = useTypedSelector(state => state.loading.isLoading, shallowEqual);\r\n    const isOnline = useSelector(isOnlineSelector);\r\n    const fetchBooksFromAPI = useFetchBooks();\r\n\r\n    const handleFormSubmit = useCallback((formValues: SearchFormValues) => {\r\n        setURL(createURL(formValues));\r\n    }, []);\r\n\r\n    const handleValidationChange = useCallback((validation: ValidationState) => {\r\n        setValidated(validation);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const controller = new AbortController();\r\n        if (URL) {\r\n            console.log(URL); // for testing purposes, remove before production\r\n            fetchBooksFromAPI(URL, controller);\r\n        }\r\n        return () => controller.abort();\r\n    }, [URL, fetchBooksFromAPI]);\r\n\r\n    return (\r\n        <PageContainer maxWidth={false} disableGutters sx={{ alignItems: \"unset\" }}>\r\n            <LogoFactory />\r\n            <SearchForm isLoading={isLoading} isOnline={isOnline} onSubmit={handleFormSubmit} onValidationChange={handleValidationChange} />\r\n        </PageContainer>\r\n    );\r\n};\r\n\r\nexport default SearchPage;\r\n","import fp from \"lodash/fp\";\r\nimport join from \"lodash/join\";\r\nimport { SearchFormValues } from \"./model\";\r\nimport { BOOK_FIELDS } from \"config\";\r\n\r\n/**\r\n * builds full GoogleBooks API search link for certain book\r\n * @param searchKeys -  object with keys that further forms part of that link\r\n * @returns GoogleBooks API search link for certain book\r\n */\r\n\r\nexport const createURL = (fields: SearchFormValues): string => {\r\n    const PATH = \"https://www.googleapis.com/books/v1/volumes?q=\";\r\n    const MAX_RESULTS = \"&maxResults=40\";\r\n    const START_INDEX = \"&startIndex=\";\r\n    const searchKeys = { inauthor: fields.authors, intitle: fields.title, subject: fields.subject, keyword: fields.keyword };\r\n\r\n    const stringifyKeys = fp.flow(\r\n        fp.toPairs,\r\n        fp.filter(([, value]) => value !== \"\"),\r\n        fp.map(([key, value]) => join([key, value], \":\")),\r\n        fp.join(\"+\")\r\n    );\r\n\r\n    return PATH + stringifyKeys(searchKeys) + MAX_RESULTS + BOOK_FIELDS + START_INDEX;\r\n};\r\n"],"names":["connect","state","isLoading","loading","dispatch","fetchFromFavorites","booksRetrievedFromFavorites","FilteredStorage","item","kind","FAVORITE_BOOK_IDENTIFIER","getAll","storeBooks","setIsFromNetwork","error","errorMessage","Error","message","showError","isError","props","navigate","useNavigate","favoriteBooks","useFavoriteBooks","processFavorites","useCallback","Paths","books","_jsx","Button","disabled","areNotEmpty","className","onClick","children","SearchField","memo","isDisabled","label","name","fieldErrors","otherProps","_objectWithoutProperties","_excluded","currentFieldErrors","useMemo","find","field","hasErrors","Boolean","errors","length","tooltipContent","content","concat","map","join","Tooltip","role","title","placement","arrow","TextField","_objectSpread","id","size","variant","displayName","Placeholders","initialSearchFields","SearchableFields","authors","placeholder","subject","_createClass","SearchFields","fields","_classCallCheck","this","key","value","str","filter","get","result","obj","validateFieldValue","push","test","trim","getFieldLabel","fieldName","searchPageFieldPlaceholderMap","validateInput","validationResult","initialValidationState","nonEmptyFields","pickBy","isEmpty","fieldValue","simpleMessage","fe","detailedMessage","forEach","fieldError","index","fieldLabel","substring","errorIndex","createDetailedMessage","isValid","console","group","log","table","Pole","Wartość","Błędy","groupEnd","SearchForm","_ref","isOnline","onSubmit","onValidationChange","formID","uuid","_React$useState","React","_React$useState2","_slicedToArray","validated","setValidated","_useFormik","useFormik","initialValues","formValues","values","handleSubmit","getFieldProps","handleReset","isFormEmpty","Object","clearFormAndValidation","_jsxs","_Fragment","ValidationAlert","shouldRender","alertMessage","onClose","BookForm","SearchInputs","SearchPageField","SearchButtons","form","type","FavoriteButton","_useState","useState","_useState2","_useState3","_useState4","URL","setURL","useTypedSelector","shallowEqual","useSelector","isOnlineSelector","fetchBooksFromAPI","useFetchBooks","handleFormSubmit","searchKeys","inauthor","intitle","keyword","fp","_ref3","_ref4","stringifyKeys","BOOK_FIELDS","createURL","handleValidationChange","validation","useEffect","controller","AbortController","abort","PageContainer","maxWidth","disableGutters","sx","alignItems","LogoFactory"],"sourceRoot":""}