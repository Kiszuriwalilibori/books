{"version":3,"file":"static/js/948.7d26641b.chunk.js","mappings":"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","sources":["pages/SearchPage/components/FavoritesButton.tsx","store/thunks/thunkFetchFromFavorites.ts","pages/SearchPage/components/SearchField.tsx","pages/SearchPage/components/SearchForm.tsx","pages/SearchPage/SearchPage.tsx"],"sourcesContent":["// import { connect } from \"react-redux\";\r\n// import { useCallback } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n\r\n// import Paths from \"routing\";\r\n\r\n// import { Button } from \"components\";\r\n// import { useFavoriteBooks } from \"hooks\";\r\n// import { thunkFetchFromFavorites } from \"js/redux/thunks/thunkFetchFromFavorites\";\r\n// import { AppDispatch, RootStateType } from \"types\";\r\n\r\n// export interface Props {\r\n//     fetchFromFavorites: () => void;\r\n//     isLoading: RootStateType[\"loading\"][\"isLoading\"];\r\n// }\r\n\r\n// export function FavoritesButton(props: Props): JSX.Element {\r\n//     const navigate = useNavigate();\r\n//     const { fetchFromFavorites, isLoading } = props;\r\n//     const { favoriteBooks } = useFavoriteBooks();\r\n\r\n//     const processFavorites = useCallback(() => {\r\n//         fetchFromFavorites();\r\n//         navigate(Paths.books);\r\n//     }, [fetchFromFavorites, navigate]);\r\n\r\n//     return (\r\n//         <Button disabled={!favoriteBooks.areNotEmpty() || isLoading} className=\"button--favorites\" onClick={processFavorites}>\r\n//             Ulubione\r\n//         </Button>\r\n//     );\r\n// }\r\n\r\n// const mapDispatchToProps = (dispatch: AppDispatch) => ({\r\n//     fetchFromFavorites: () => dispatch(thunkFetchFromFavorites()),\r\n// });\r\n\r\n// const mapStateToProps = (state: RootStateType) => ({\r\n//     isLoading: state.loading.isLoading,\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(FavoritesButton);\r\nimport { connect } from \"react-redux\";\r\nimport { useCallback } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport Paths from \"routing\";\r\n\r\nimport { Button } from \"components\";\r\nimport { useFavoriteBooks } from \"hooks\";\r\nimport { thunkFetchFromFavorites } from \"store/thunks/thunkFetchFromFavorites\";\r\nimport { AppDispatch, RootStateType } from \"types\";\r\n\r\nexport interface Props {\r\n    fetchFromFavorites: () => void;\r\n    isLoading: RootStateType[\"loading\"][\"isLoading\"];\r\n}\r\n\r\nexport function FavoritesButton(props: Props): JSX.Element {\r\n    const navigate = useNavigate();\r\n    const { fetchFromFavorites, isLoading } = props;\r\n    const { favoriteBooks } = useFavoriteBooks();\r\n    const { t } = useTranslation();\r\n\r\n    const processFavorites = useCallback(() => {\r\n        fetchFromFavorites();\r\n        navigate(Paths.books);\r\n    }, [fetchFromFavorites, navigate]);\r\n\r\n    return (\r\n        <Button disabled={!favoriteBooks.areNotEmpty() || isLoading} className=\"button--favorites\" onClick={processFavorites}>\r\n            {t(\"actions.favorites\")}\r\n        </Button>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\r\n    fetchFromFavorites: () => dispatch(thunkFetchFromFavorites()),\r\n});\r\n\r\nconst mapStateToProps = (state: RootStateType) => ({\r\n    isLoading: state.loading.isLoading,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FavoritesButton);\r\n","import { ThunkAction } from \"redux-thunk\";\r\nimport { AnyAction } from \"redux\";\r\n\r\nimport { RootStateType } from \"types\";\r\nimport { FilteredStorage } from \"utils\";\r\nimport { storeBooks, setIsFromNetwork, showError } from \"../actionCreators\";\r\nimport { FAVORITE_BOOK_IDENTIFIER } from \"config\";\r\n\r\nexport function thunkFetchFromFavorites(): ThunkAction<void, RootStateType, unknown, AnyAction> {\r\n    return dispatch => {\r\n        try {\r\n            const favorites = new FilteredStorage(item => item.kind === FAVORITE_BOOK_IDENTIFIER);\r\n            const booksRetrievedFromFavorites = favorites.getAll();\r\n            dispatch(storeBooks(booksRetrievedFromFavorites));\r\n            dispatch(setIsFromNetwork(false));\r\n        } catch (error) {\r\n            const errorMessage = error instanceof Error ? error.message : \"Podczas próby pobrania ulubionych wystąpił błąd\";\r\n            dispatch(\r\n                showError({\r\n                    isError: true,\r\n                    errorMessage: errorMessage,\r\n                })\r\n            );\r\n        }\r\n    };\r\n}\r\n","import TextField from \"@mui/material/TextField\";\r\nimport { FieldInputProps } from \"formik\";\r\nimport { memo, useMemo } from \"react\";\r\nimport { Tooltip } from \"components\";\r\nimport { FieldValidationError } from \"../utils/model\";\r\n\r\nexport interface SearchFieldProps extends FieldInputProps<string> {\r\n    label: string;\r\n    isDisabled: boolean;\r\n    fieldErrors?: FieldValidationError[];\r\n}\r\n\r\nconst SearchField = memo((props: SearchFieldProps): JSX.Element => {\r\n    const { isDisabled, label, name, fieldErrors, ...otherProps } = props;\r\n\r\n    // Find errors specific to this field\r\n    const currentFieldErrors = useMemo(() => {\r\n        return fieldErrors?.find(error => error.field === name);\r\n    }, [fieldErrors, name]);\r\n\r\n    const hasErrors = Boolean(currentFieldErrors && currentFieldErrors.errors.length > 0);\r\n\r\n    // Create detailed tooltip content\r\n    const tooltipContent = useMemo(() => {\r\n        let content = \"Wymagania:\\n• Minimum 2 znaki\\n• Co najmniej jedna litera lub cyfra\\n• Bez spacji na początku i końcu\";\r\n\r\n        if (hasErrors) {\r\n            content += `\\n\\nBłędy w tym polu:\\n${currentFieldErrors!.errors.map(error => `• ${error}`).join(\"\\n\")}`;\r\n        }\r\n\r\n        return content;\r\n    }, [hasErrors, currentFieldErrors]);\r\n\r\n    // No helper text - we only show errors in the ValidationAlert\r\n\r\n    return (\r\n        <Tooltip role=\"tooltip\" title={tooltipContent} placement=\"top\" arrow>\r\n            <TextField disabled={isDisabled} aria-label={`input field for ${name} field`} label={label} id={name} size=\"small\" variant=\"outlined\" {...otherProps} />\r\n        </Tooltip>\r\n    );\r\n});\r\n\r\nSearchField.displayName = \"SearchField\";\r\n\r\nexport default SearchField;\r\n","import React, { useCallback } from \"react\";\r\nimport { useFormik } from \"formik\";\r\nimport uuid from \"react-uuid\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { Button, ValidationAlert } from \"components\";\r\nimport { BookForm, SearchButtons, SearchInputs } from \"pages/styled\";\r\nimport { SearchField, FavoriteButton } from \"./\";\r\nimport { SearchFormValues, SearchPageField, searchPageFieldPlaceholderMap, initialValues, initialValidationState, ValidationState } from \"../utils/model\";\r\nimport { validateInput } from \"../utils\";\r\n\r\ninterface SearchFormProps {\r\n    isLoading: boolean;\r\n    isOnline: boolean;\r\n    onSubmit: (values: SearchFormValues) => void;\r\n    onValidationChange: (validation: ValidationState) => void;\r\n}\r\n\r\nexport const SearchForm: React.FC<SearchFormProps> = ({ isLoading, isOnline, onSubmit, onValidationChange }) => {\r\n    const formID = uuid();\r\n    const [validated, setValidated] = React.useState(initialValidationState);\r\n    const { t } = useTranslation();\r\n\r\n    const handleCloseValidationAlert = () => {\r\n        setValidated(initialValidationState);\r\n        onValidationChange(initialValidationState);\r\n    };\r\n\r\n    const { values, handleSubmit, getFieldProps, handleReset } = useFormik({\r\n        initialValues,\r\n        onSubmit: (formValues: SearchFormValues) => {\r\n            const validationResult = validateInput(formValues);\r\n            setValidated(validationResult);\r\n            onValidationChange(validationResult);\r\n\r\n            if (validationResult.isValid) {\r\n                onSubmit(formValues);\r\n            }\r\n        },\r\n    });\r\n\r\n    const isFormEmpty = useCallback(() => {\r\n        return Object.values(values).join(\"\") === \"\";\r\n    }, [values]);\r\n\r\n    const clearFormAndValidation = useCallback(() => {\r\n        setValidated(initialValidationState);\r\n        onValidationChange(initialValidationState);\r\n        handleReset(null);\r\n    }, [handleReset, onValidationChange]);\r\n\r\n    return (\r\n        <>\r\n            <ValidationAlert shouldRender={!validated.isValid} alertMessage={validated.message} fieldErrors={validated.fieldErrors} onClose={handleCloseValidationAlert} />\r\n            <BookForm id={formID}>\r\n                <SearchInputs>\r\n                    {Object.values(SearchPageField).map((fieldName: SearchPageField) => (\r\n                        <SearchField key={fieldName} isDisabled={isLoading} label={searchPageFieldPlaceholderMap[fieldName]} fieldErrors={validated.fieldErrors} {...getFieldProps(fieldName)} />\r\n                    ))}\r\n                </SearchInputs>\r\n                <SearchButtons>\r\n                    <Button form={formID} disabled={isLoading || isFormEmpty() || !isOnline} onClick={handleSubmit as unknown as React.MouseEventHandler<HTMLButtonElement>} className=\"button--ok\" type=\"submit\">\r\n                        {t(\"searchPage.searchButton\")}\r\n                    </Button>\r\n                    <Button disabled={isLoading || isFormEmpty()} onClick={clearFormAndValidation} className=\"button--problem\" type=\"reset\">\r\n                        {t(\"searchPage.clearButton\")}\r\n                    </Button>\r\n                    <FavoriteButton />\r\n                </SearchButtons>\r\n            </BookForm>\r\n        </>\r\n    );\r\n};\r\n","import { useCallback } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport { SearchForm } from \"./components/SearchForm\";\r\nimport { LogoFactory } from \"components\";\r\n\r\nimport { PageContainer } from \"pages/styled\";\r\nimport { SearchFormValues, ValidationState } from \"./utils/model\";\r\nimport { isOnlineSelector, isLoadingSelector } from \"store/selectors\";\r\nimport { useSearchBooks } from \"hooks/useSearchBooks\";\r\n\r\nexport const SearchPage = () => {\r\n    const isLoading = useSelector(isLoadingSelector);\r\n    const isOnline = useSelector(isOnlineSelector);\r\n    const { searchBooks } = useSearchBooks();\r\n\r\n    const handleFormSubmit = useCallback(\r\n        (formValues: SearchFormValues) => {\r\n            searchBooks(formValues);\r\n        },\r\n        [searchBooks]\r\n    );\r\n\r\n    const handleValidationChange = useCallback((validation: ValidationState) => {}, []);\r\n\r\n    return (\r\n        <PageContainer maxWidth={false} disableGutters sx={{ alignItems: \"unset\" }}>\r\n            <LogoFactory />\r\n            <SearchForm isLoading={isLoading} isOnline={isOnline} onSubmit={handleFormSubmit} onValidationChange={handleValidationChange} />\r\n        </PageContainer>\r\n    );\r\n};\r\n\r\nexport default SearchPage;\r\n"],"names":["connect","state","isLoading","loading","dispatch","fetchFromFavorites","booksRetrievedFromFavorites","FilteredStorage","item","kind","FAVORITE_BOOK_IDENTIFIER","getAll","storeBooks","setIsFromNetwork","error","errorMessage","Error","message","showError","isError","props","navigate","useNavigate","favoriteBooks","useFavoriteBooks","t","useTranslation","processFavorites","useCallback","Paths","books","_jsx","Button","disabled","areNotEmpty","className","onClick","children","SearchField","memo","isDisabled","label","name","fieldErrors","otherProps","_objectWithoutProperties","_excluded","currentFieldErrors","useMemo","find","field","hasErrors","Boolean","errors","length","tooltipContent","content","concat","map","join","Tooltip","role","title","placement","arrow","TextField","_objectSpread","id","size","variant","displayName","SearchForm","_ref","isOnline","onSubmit","onValidationChange","formID","uuid","_React$useState","React","initialValidationState","_React$useState2","_slicedToArray","validated","setValidated","_useFormik","useFormik","initialValues","formValues","validationResult","validateInput","isValid","values","handleSubmit","getFieldProps","handleReset","isFormEmpty","Object","clearFormAndValidation","_jsxs","_Fragment","ValidationAlert","shouldRender","alertMessage","onClose","BookForm","SearchInputs","SearchPageField","fieldName","searchPageFieldPlaceholderMap","SearchButtons","form","type","FavoriteButton","useSelector","isLoadingSelector","isOnlineSelector","searchBooks","useSearchBooks","handleFormSubmit","handleValidationChange","validation","PageContainer","maxWidth","disableGutters","sx","alignItems","LogoFactory"],"sourceRoot":""}