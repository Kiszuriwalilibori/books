{"version":3,"file":"static/js/744.474f7066.chunk.js","mappings":"2SAiCA,IAQA,GAAeA,EAAAA,EAAAA,KAJS,SAACC,GAAoB,MAAM,CAC/CC,UAAWD,EAAME,QAAQD,UAC5B,IAN0B,SAACE,GAAqB,MAAM,CACnDC,mBAAoB,kBAAMD,GCzBnB,SAAAA,GACH,IACI,IACME,EADY,IAAIC,EAAAA,IAAgB,SAAAC,GAAI,OAAIA,EAAKC,OAASC,EAAAA,EAAwB,IACtCC,SAC9CP,GAASQ,EAAAA,EAAAA,YAAWN,IACpBF,GAASS,EAAAA,EAAAA,mBAAiB,GAC9B,CAAE,MAAOC,GACL,IAAMC,EAAeD,aAAiBE,MAAQF,EAAMG,QAAU,yEAC9Db,GACIc,EAAAA,EAAAA,WAAU,CACNC,SAAS,EACTJ,aAAcA,IAG1B,CACJ,GDU6D,EAChE,GAMD,EAzBO,SAAyBK,GAC5B,IAAMC,GAAWC,EAAAA,EAAAA,MACTjB,EAAkCe,EAAlCf,mBAAoBH,EAAckB,EAAdlB,UACpBqB,GAAkBC,EAAAA,EAAAA,MAAlBD,cAOR,OACIE,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CAACC,UAAWJ,EAAcK,eAAiB1B,EAAW2B,UAAU,oBAAoBC,QANtE,WACrBzB,IACAgB,EAASU,EAAAA,EAAMC,MACnB,EAGyHC,SAAC,YAI9H,I,kDErBA,SAASC,EAAkBC,GACJA,EAAXC,OAEqBC,OACjC,CAEA,ICdYC,EDwBZ,EAVoB,SAAClB,GACjB,IAAQmB,EAA2CnB,EAA3CmB,WAAYC,EAA+BpB,EAA/BoB,MAAOC,EAAwBrB,EAAxBqB,KAASC,GAAUC,EAAAA,EAAAA,GAAKvB,EAAKwB,GAExD,OACInB,EAAAA,EAAAA,KAACoB,EAAAA,GAAO,CAACC,KAAK,UAAUC,MAAM,0DAAqDC,UAAU,MAAKf,UAC9FR,EAAAA,EAAAA,KAACwB,EAAAA,GAASC,EAAAA,EAAAA,GAAA,CAACvB,SAAUY,EAAY,gCAAAY,OAA+BV,EAAI,UAAUD,MAAOA,EAAOY,GAAIX,EAAMY,KAAK,QAAQC,QAAQ,WAAWC,aAAcrB,GAAuBQ,KAGvL,E,sCERMc,EAAO,iDACPC,EAAc,iBACdC,EAAc,eAEdC,EACO,SAACC,GAAwB,OAAKJ,EAAOI,EAAOC,QAAUJ,EAAcK,EAAAA,GAAcJ,CAAW,EADpGC,EAEM,SAACC,GACL,IAAMG,EAAa,CAAEC,SAAUJ,EAAOK,QAASC,QAASN,EAAOb,MAAOoB,QAASP,EAAOO,SAEhFC,EAAgBC,IAAAA,KAClBA,IAAAA,QACAA,IAAAA,QAAU,SAAAC,GAAO,QAAqB,KAAfA,EAAQ,GAAU,IACzCD,IAAAA,KAAO,SAAAC,GACH,OAAOC,IAAKD,EAAS,IACzB,IACAD,IAAAA,KAAQ,MAGZ,OAAOb,EAAOY,EAAcL,GAAcN,EAAcK,EAAAA,GAAcJ,CAC1E,EAOJ,EAJuB,SAACE,GACpB,OAAOA,EAAOC,QAAUF,EAAoBC,GAAUD,EAAmBC,EAC7E,E,+BDlCC,SAJWtB,GAAAA,EAAY,gBAAZA,EAAY,mBAAZA,EAAY,mBAIvB,CAJWA,IAAAA,EAAY,KAUjB,I,IEZKkC,EFYCC,EAA0C,CACnD,CAAEhC,KAAMiC,EAAAA,EAAiBT,QAASU,YAAarC,EAAa2B,SAC5D,CAAExB,KAAMiC,EAAAA,EAAiB3B,MAAO4B,YAAarC,EAAaS,OAC1D,CAAEN,KAAMiC,EAAAA,EAAiBP,QAASQ,YAAarC,EAAa6B,UA0BhE,EAFqB,IAtBH,WAEd,SAAAS,EAAYhB,IAA4BiB,EAAAA,EAAAA,GAAA,KAAAD,GAAA,KADxChB,YAAM,EAEFkB,KAAKlB,OAASA,CAClB,CAgBC,OAhBAmB,EAAAA,EAAAA,GAAAH,EAAA,EAAAI,IAAA,iBAAAC,MACD,SAAeC,GAGX,OAF2BJ,KAAKlB,OAAOuB,QAAO,SAAC3E,GAAiB,OAAKA,EAAKiC,OAASyC,CAAG,IAAE,GAE3EP,WACjB,GAAC,CAAAK,IAAA,mCAAAI,IAED,WACI,IAAMC,EAAoC,CAAC,EAC3C,IAAK,IAAIC,KAAOR,KAAKlB,OACjByB,EAAOP,KAAKlB,OAAO0B,GAAK7C,MAAQ,GAEpC,OAAO4C,CACX,GAAC,CAAAL,IAAA,YAAAI,IACD,WACI,OAAON,KAAKlB,MAChB,KAACgB,CAAA,CApBa,GAsBG,CAAiBH,G,iDElCrC,SALWD,GAAAA,EAAe,kBAAfA,EAAe,kBAAfA,EAAe,cAAfA,EAAe,kBAK1B,CALWA,IAAAA,EAAe,KAOpB,IAAMe,GAEZC,EAAA,IAAAC,EAAAA,EAAAA,GAAAD,EACIhB,EAAgBkB,QAAU,UAAOD,EAAAA,EAAAA,GAAAD,EACjChB,EAAgBmB,MAAQ,eAAOF,EAAAA,EAAAA,GAAAD,EAC/BhB,EAAgBoB,QAAU,aAAUH,EAAAA,EAAAA,GAAAD,EACpChB,EAAgBqB,QAAU,uBAAgBL,GAUlCM,GAA+BC,EAAA,IAAAN,EAAAA,EAAAA,GAAAM,EACvCvB,EAAgBkB,QAAU,KAAED,EAAAA,EAAAA,GAAAM,EAC5BvB,EAAgBmB,MAAQ,KAAEF,EAAAA,EAAAA,GAAAM,EAC1BvB,EAAgBoB,QAAU,KAAEH,EAAAA,EAAAA,GAAAM,EAC5BvB,EAAgBqB,QAAU,IAAEE,GAGpBC,EAA0C,CAAEC,SAAS,EAAMhF,QAAS,ICUjF,EAzBsB,SAAC2C,GACnB,IAGcpD,EAHV0F,EAA+BF,EAC/B/E,EAAoB,GAMlB8C,EAAgEoC,IAAOvC,GAE7E,IAAKwC,IAAQrC,GACT,IAAK,IAAIiB,KAAOjB,EACZ,IAA8B,MARxBvD,EAQGuD,EAAWiB,IAPZqB,QAAU,GAAK,WAAWC,KAAK9F,IAOF,CACjC,IAAMgC,EAAQ+D,EAAaC,eAAexB,GAC1CkB,EAAmB,CAAED,SAAS,EAAOhF,QAAS,kCAA+BuB,GAC7EvB,EAAQwF,KAAKjE,EACjB,CAMR,OAFiC,IAA7B0D,EAAiBD,UAAmBC,EAAiBjF,QAAU,8CAAsCA,EAAQsD,KAAK,OAE/G2B,CACX,ECLA,EAjB6B,SAACtC,GAC1B,IAAMJ,EAAO,iDACPC,EAAc,gBACdM,EAAa,CAAEC,SAAUJ,EAAOK,QAASC,QAASN,EAAOb,MAAOoB,QAASP,EAAOO,SAEhFC,EAAgBC,IAAAA,KAClBA,IAAAA,QACAA,IAAAA,QAAU,SAAAC,GAAO,QAAqB,KAAfA,EAAQ,GAAU,IACzCD,IAAAA,KAAO,SAAAC,GACH,OAAOC,IAAKD,EAAS,IACzB,IACAD,IAAAA,KAAQ,MAGZ,OAAOT,EAAOC,QAAUL,EAAOI,EAAOC,QAAUJ,EAAcD,EAAOY,EAAcL,GAAcN,CACrG,ECnBA,EAV4B,SAACG,GACzB,GAAKA,EAAOC,QAAZ,CACA,IAAMsB,GAAWjC,EAAAA,EAAAA,GAAA,GAAQU,GAEzB,IAAK,IAAM8C,YADJvB,EAAOtB,QACSsB,EACdA,EAAOuB,WAAkBvB,EAAOuB,GAEzC,OAAOvB,CAN8B,CAOzC,E,4CCHA,GAL8C,WAE1C,OAD4CwB,EAAAA,EAAAA,UAAQ,kBAAM,IAAIC,OAAO,IAAIC,IAAI,kBAA0C,GAAE,GAE7H,EC8CA,GAxC6B,SAACC,EAA4BC,EAA6B5B,GAEnF,IAAM6B,GAAsCL,EAAAA,EAAAA,UAAQ,kBAAMI,CAAU,GAAE,IAChE1F,GAAWC,EAAAA,EAAAA,MAEjB2F,GAAuDC,EAAAA,EAAAA,MAA/CC,EAAYF,EAAZE,aAActG,EAAgBoG,EAAhBpG,iBAAkBD,EAAUqG,EAAVrG,WAClCwG,EAASC,KACTC,GAAcC,EAAAA,EAAAA,OAEpBC,EAAAA,EAAAA,YAAU,WA2BN,OA1BIC,OAAOb,QAAUE,GAAoBA,EAAiBT,QAAUU,IAChEI,GAAa,GACbC,EAAOM,YAAY,CAAEZ,iBAAAA,IACrBM,EAAOO,QAAU,SAAUC,GACvBN,EAAYxG,MAAM,sDAAoC8G,EAAE3G,QAC5D,EACAmG,EAAOS,UAAY,SAACD,GAIhB,GAHIA,EAAEE,KAAKC,QACPT,EAAYxG,MAAM,4FAAgE8G,EAAEE,KAAKC,OAAO,GAAK,2CAAsBH,EAAEE,KAAKC,OAAO1B,QAEzIuB,EAAEE,KAAK9F,MAAO,CACd,IAAMgG,GAAiBC,EAAAA,GAAAA,KAASC,EAAAA,EAAAA,KAAwBC,EAAAA,GAAAA,GAAKP,EAAEE,KAAK9F,QAASmD,GAC7EvE,EAAWoH,GACXnH,GAAiB,GACjByG,EAAYc,QAAQ,qBAADjF,OAAsB6E,EAAe3B,OAAOgC,WAAU,uBACzEhH,EAASU,EAAAA,EAAMC,MACnB,CACK4F,EAAEE,KAAK9F,OAAU4F,EAAEE,KAAKC,OAAO1B,QAChCiB,EAAYgB,QAAQ,4EAGd,OAAVvB,QAAU,IAAVA,GAAAA,EAAYwB,QACZpB,GAAa,EACjB,GAGG,kBAAgB,OAAVJ,QAAU,IAAVA,OAAU,EAAVA,EAAYwB,OAAQ,CACrC,GAAG,CAACnB,EAAQN,EAAkBE,EAAoB7B,GACtD,EC4CA,GA7E0B,WACtB,IAAMqD,EAASC,MAEfC,EAAkCC,EAAAA,SAAe3C,GAAuB4C,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjEI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,EAAgCL,EAAAA,SAAe,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA3CE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAC5BG,EAAgCT,EAAAA,SAAe,IAAGU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA3CE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAC5BG,GAA4BC,EAAAA,EAAAA,SAAmDC,GAAUC,GAAAd,EAAAA,EAAAA,GAAAW,EAAA,GAAlFrE,EAAMwE,EAAA,GAAEC,EAASD,EAAA,GAElBzJ,GAAY2J,EAAAA,EAAAA,KAAiB,SAAA5J,GAAK,OAAIA,EAAME,QAAQD,SAAS,GAAE4J,EAAAA,IAC/DC,GAAWC,EAAAA,EAAAA,IAAYC,GAAAA,IAEvBC,GAAYC,EAAAA,EAAAA,IAAgBb,EAAUJ,GACxCnC,EAAa,IAAIqD,gBACrBC,GAAcH,EAAWnD,EAAY5B,GAIrC,IAAAmF,GAA6DC,EAAAA,EAAAA,IAAU,CACnEzE,cAAAA,EACA0E,SAAQ,SAACC,GACL,IAAMC,EAAcC,EAAcF,GAClC1B,EAAa2B,GACTA,EAAYzE,UACZkD,EAAYyB,EAAeH,IAC3BlB,EAAYsB,EAAqBJ,IACjCb,EAAUkB,EAAaL,IAE/B,IAVIM,EAAMT,EAANS,OAAQC,EAAYV,EAAZU,aAAcC,EAAaX,EAAbW,cAAeC,EAAWZ,EAAXY,YAavCC,EAAcxC,EAAAA,aAAkB,WAClC,MAA0C,KAAnCyC,OAAOL,OAAOA,GAAQxG,KAAK,GACtC,GAAG,CAACwG,IAEEM,EAAqE1C,EAAAA,aAAkB,WACzFI,EAAa/C,GACbkF,EAAY,KAEhB,GAAG,IAWH,OACIzJ,EAAAA,EAAAA,KAAA6J,EAAAA,SAAA,CAAArJ,UACIsJ,EAAAA,EAAAA,MAACC,GAAAA,GAAa,CAACC,UAAU,EAAOC,gBAAgB,EAAMC,GAAI,CAAEC,WAAY,SAAU3J,SAAA,EAC9ER,EAAAA,EAAAA,KAACoK,EAAAA,GAAW,KACZpK,EAAAA,EAAAA,KAACqK,EAAAA,GAAK,CAACC,cAAejD,EAAU7C,QAAS+F,aAAclD,EAAU7H,WACjEsK,EAAAA,EAAAA,MAACU,GAAAA,GAAQ,CAAC7I,GAAIoF,EAAOvG,SAAA,EACjBR,EAAAA,EAAAA,KAACyK,GAAAA,GAAY,CAAAjK,SACRmJ,OAAOL,OAAOvG,GAAiB2H,KAAI,SAACC,GAA0B,OAC3D3K,EAAAA,EAAAA,KAAC4K,GAAWnJ,EAAAA,EAAAA,GAAA,CAAcX,WAAYrC,EAAWsC,MAAO+C,EAA8B6G,IAAgBnB,EAAcmB,IAAlG3D,MAAgH,OAG1I8C,EAAAA,EAAAA,MAACe,GAAAA,GAAa,CAAArK,SAAA,EACVR,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CAAC6K,KAAM/D,EAAQ7G,SAAUzB,GAAaiL,MAAkBpB,EAAUjI,QAASkJ,EAAuEnJ,UAAU,aAAa2K,KAAK,SAAQvK,SAAC,YAI9LR,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CAACC,SAAUzB,GAAaiL,IAAerJ,QAASuJ,EAAwBxJ,UAAU,kBAAkB2K,KAAK,QAAOvK,SAAC,uBAIxHR,EAAAA,EAAAA,KAACgL,EAAc,cAMvC,C","sources":["pages/SearchPage/components/FavoritesButton.tsx","js/redux/thunks/thunkFetchFromFavorites.ts","pages/SearchPage/components/SearchField.tsx","pages/SearchPage/utils/searchFields.ts","pages/SearchPage/utils/createBooksURL.ts","pages/SearchPage/utils/model.ts","pages/SearchPage/utils/validateInput.ts","pages/SearchPage/utils/createTotalNumberURL.ts","pages/SearchPage/utils/createFilter.ts","hooks/useFetchBooks.ts/useGetWorker.ts","hooks/useFetchBooks.ts/useFetchBooks.ts","pages/SearchPage/SearchPage.tsx"],"sourcesContent":["import { connect } from \"react-redux\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport Paths from \"routing\";\r\n\r\nimport { Button } from \"components\";\r\nimport { useFavoriteBooks } from \"hooks\";\r\nimport { thunkFetchFromFavorites } from \"js/redux/thunks/thunkFetchFromFavorites\";\r\nimport { AppDispatch, RootStateType } from \"types\";\r\n\r\nexport interface Props {\r\n    fetchFromFavorites: () => void;\r\n    isLoading: RootStateType[\"loading\"][\"isLoading\"];\r\n}\r\n\r\nexport function FavoritesButton(props: Props): JSX.Element {\r\n    const navigate = useNavigate();\r\n    const { fetchFromFavorites, isLoading } = props;\r\n    const { favoriteBooks } = useFavoriteBooks();\r\n\r\n    const processFavorites = () => {\r\n        fetchFromFavorites();\r\n        navigate(Paths.books);\r\n    };\r\n\r\n    return (\r\n        <Button disabled={!favoriteBooks.areNotEmpty() || isLoading} className=\"button--favorites\" onClick={processFavorites}>\r\n            Ulubione\r\n        </Button>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\r\n    fetchFromFavorites: () => dispatch(thunkFetchFromFavorites()),\r\n});\r\n\r\nconst mapStateToProps = (state: RootStateType) => ({\r\n    isLoading: state.loading.isLoading,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FavoritesButton);\r\n","import { ThunkAction } from \"redux-thunk\";\r\nimport { AnyAction } from \"redux\";\r\n\r\nimport { RootStateType } from \"types\";\r\nimport { FilteredStorage } from \"js/utils\";\r\nimport { storeBooks, setIsFromNetwork, showError } from \"../actionCreators\";\r\nimport { FAVORITE_BOOK_IDENTIFIER } from \"config\";\r\n\r\nexport function thunkFetchFromFavorites(): ThunkAction<void, RootStateType, unknown, AnyAction> {\r\n    return dispatch => {\r\n        try {\r\n            const favorites = new FilteredStorage(item => item.kind === FAVORITE_BOOK_IDENTIFIER);\r\n            const booksRetrievedFromFavorites = favorites.getAll();\r\n            dispatch(storeBooks(booksRetrievedFromFavorites));\r\n            dispatch(setIsFromNetwork(false));\r\n        } catch (error) {\r\n            const errorMessage = error instanceof Error ? error.message : \"Podczas próby pobrania ulubionych wystąpił błąd\";\r\n            dispatch(\r\n                showError({\r\n                    isError: true,\r\n                    errorMessage: errorMessage,\r\n                })\r\n            );\r\n        }\r\n    };\r\n}\r\n","import { MouseEvent } from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport { FieldInputProps } from \"formik\";\r\nimport { Tooltip } from \"components\";\r\n\r\nexport type props = FieldInputProps<string> & {\r\n    label: string;\r\n    isDisabled: boolean;\r\n};\r\n\r\nfunction mouseEnterHandler(event: MouseEvent<HTMLInputElement>): void {\r\n    const { target } = event;\r\n\r\n    (target as HTMLInputElement).focus();\r\n}\r\n\r\nconst SearchField = (props: props): JSX.Element => {\r\n    const { isDisabled, label, name, ...otherProps } = props;\r\n\r\n    return (\r\n        <Tooltip role=\"tooltip\" title=\"Nie mniej niż dwa znaki w tym jeden alfanumeryczny\" placement=\"top\">\r\n            <TextField disabled={isDisabled} aria-label={`input field for ${name} field`} label={label} id={name} size=\"small\" variant=\"outlined\" onMouseEnter={mouseEnterHandler} {...otherProps} />\r\n        </Tooltip>\r\n    );\r\n};\r\n\r\nexport default SearchField;\r\n","import { SearchableFields } from \"types\";\r\n\r\nexport enum Placeholders {\r\n    authors = \"Autor\",\r\n    title = \"Tytuł\",\r\n    subject = \"Etykiety\",\r\n}\r\ninterface SearchField {\r\n    name: SearchableFields;\r\n    placeholder: string;\r\n}\r\n\r\nexport const initialSearchFields: Array<SearchField> = [\r\n    { name: SearchableFields.authors, placeholder: Placeholders.authors },\r\n    { name: SearchableFields.title, placeholder: Placeholders.title },\r\n    { name: SearchableFields.subject, placeholder: Placeholders.subject },\r\n];\r\nclass SearchFields {\r\n    fields: Array<SearchField>;\r\n    constructor(fields: Array<SearchField>) {\r\n        this.fields = fields;\r\n    }\r\n    getPlaceholder(str: string) {\r\n        const field: SearchField = this.fields.filter((item: SearchField) => item.name === str)[0];\r\n\r\n        return field.placeholder;\r\n    }\r\n\r\n    get getSearchFieldsWithInitialValues() {\r\n        const result: { [key: string]: string } = {};\r\n        for (let obj in this.fields) {\r\n            result[this.fields[obj].name] = \"\";\r\n        }\r\n        return result;\r\n    }\r\n    get getFields() {\r\n        return this.fields;\r\n    }\r\n}\r\nconst searchFields = new SearchFields(initialSearchFields);\r\n\r\nexport default searchFields;\r\n","import fp from \"lodash/fp\";\r\nimport join from \"lodash/join\";\r\nimport { SearchFormValues } from \"./model\";\r\nimport { BOOK_FIELDS } from \"config\";\r\n\r\nexport interface BookSearchPattern {\r\n    inauthor: string;\r\n    intitle: string;\r\n    subject: string;\r\n}\r\n\r\n/**\r\n * builds full GoogleBooks API search link for certain book\r\n * @param searchKeys -  object with keys that further forms part of that link\r\n * @returns GoogleBooks API search link for certain book\r\n */\r\nconst PATH = \"https://www.googleapis.com/books/v1/volumes?q=\";\r\nconst MAX_RESULTS = \"&maxResults=40\";\r\nconst START_INDEX = \"&startIndex=\";\r\n\r\nconst buildURL = {\r\n    keyword: (fields: SearchFormValues) => PATH + fields.keyword + MAX_RESULTS + BOOK_FIELDS + START_INDEX,\r\n    fields: (fields: SearchFormValues) => {\r\n        const searchKeys = { inauthor: fields.authors, intitle: fields.title, subject: fields.subject };\r\n\r\n        const stringifyKeys = fp.flow(\r\n            fp.toPairs,\r\n            fp.filter(element => !(element[1] === \"\")),\r\n            fp.map(element => {\r\n                return join(element, \":\");\r\n            }),\r\n            fp.join(\"+\")\r\n        );\r\n\r\n        return PATH + stringifyKeys(searchKeys) + MAX_RESULTS + BOOK_FIELDS + START_INDEX;\r\n    },\r\n};\r\n\r\nconst createBooksURL = (fields: SearchFormValues): string => {\r\n    return fields.keyword ? buildURL[\"keyword\"](fields) : buildURL[\"fields\"](fields);\r\n};\r\n\r\nexport default createBooksURL;\r\n","export enum SearchPageField {\r\n    KEYWORD = \"keyword\",\r\n    AUTHORS = \"authors\",\r\n    TITLE = \"title\",\r\n    SUBJECT = \"subject\",\r\n}\r\n\r\nexport const searchPageFieldPlaceholderMap: {\r\n    [key in SearchPageField]: string;\r\n} = {\r\n    [SearchPageField.AUTHORS]: \"Autor\",\r\n    [SearchPageField.TITLE]: \"Tytuł\",\r\n    [SearchPageField.SUBJECT]: \"Etykiety\",\r\n    [SearchPageField.KEYWORD]: \"Słowo kluczowe\",\r\n};\r\n\r\nexport type SearchFormValues = { [key in SearchPageField]: string };\r\n\r\nexport interface ValidationState {\r\n    message: string;\r\n    isValid: boolean;\r\n}\r\n\r\nexport const initialValues: SearchFormValues = {\r\n    [SearchPageField.AUTHORS]: \"\",\r\n    [SearchPageField.TITLE]: \"\",\r\n    [SearchPageField.SUBJECT]: \"\",\r\n    [SearchPageField.KEYWORD]: \"\",\r\n};\r\n\r\nexport const initialValidationState: ValidationState = { isValid: true, message: \"\" };\r\n","import pickBy from \"lodash/pickBy\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport { initialValidationState, SearchFormValues } from \"./model\";\r\nimport { searchFields } from \".\";\r\nimport { SearchableFields } from \"types\";\r\n\r\ninterface resultType {\r\n    isValid: boolean;\r\n    message: string;\r\n}\r\n/**\r\n * validates input fields content.\r\n * @param fields -  object with keys and valuesthat further forms part of that link\r\n * @returns object with validation result and error message\r\n */\r\nconst validateInput = (fields: SearchFormValues) => {\r\n    let validationResult: resultType = initialValidationState;\r\n    let message: string[] = [];\r\n\r\n    const test = (item: string): boolean => {\r\n        return item.length >= 2 && /\\d|[A-z]/.test(item);\r\n    };\r\n\r\n    const searchKeys: { [index in SearchableFields as string]: string } = pickBy(fields);\r\n\r\n    if (!isEmpty(searchKeys)) {\r\n        for (let key in searchKeys) {\r\n            if (test(searchKeys[key]) === false) {\r\n                const label = searchFields.getPlaceholder(key);\r\n                validationResult = { isValid: false, message: \"Nieprawidłowe dane w polu \" + label };\r\n                message.push(label);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (validationResult.isValid === false) validationResult.message = \"Nieprawidłowe wartości w polach: \" + message.join(\", \");\r\n\r\n    return validationResult;\r\n};\r\n\r\nexport default validateInput;\r\n","import fp from \"lodash/fp\";\r\nimport join from \"lodash/join\";\r\nimport { SearchFormValues } from \"./model\";\r\n\r\nexport interface BookSearchPattern {\r\n    inauthor: string;\r\n    intitle: string;\r\n    subject: string;\r\n}\r\n\r\n/**\r\n * builds full GoogleBooks API search link for certain book\r\n * @param searchKeys -  object with keys that further forms part of that link\r\n * @returns GoogleBooks API search link for certain book\r\n */\r\n\r\nconst createTotalNumberURL = (fields: SearchFormValues): string => {\r\n    const PATH = \"https://www.googleapis.com/books/v1/volumes?q=\";\r\n    const MAX_RESULTS = \"&maxResults=1\";\r\n    const searchKeys = { inauthor: fields.authors, intitle: fields.title, subject: fields.subject };\r\n\r\n    const stringifyKeys = fp.flow(\r\n        fp.toPairs,\r\n        fp.filter(element => !(element[1] === \"\")),\r\n        fp.map(element => {\r\n            return join(element, \":\");\r\n        }),\r\n        fp.join(\"+\")\r\n    );\r\n\r\n    return fields.keyword ? PATH + fields.keyword + MAX_RESULTS : PATH + stringifyKeys(searchKeys) + MAX_RESULTS;\r\n};\r\n\r\nexport default createTotalNumberURL;\r\n","import { SearchFormValues } from \"./model\";\n\nexport const createFilter = (fields: Partial<SearchFormValues>) => {\n    if (!fields.keyword) return undefined;\n    const filter: any = { ...fields };\n    delete filter.keyword;\n    for (const property in filter) {\n        if (!filter[property]) delete filter[property];\n    }\n    return filter;\n};\n\nexport default createFilter;\n","import { useMemo } from \"react\";\n\nexport const useGetMemoizedFetchBooksWorker = () => {\n    const getMemoizedFetchBooksWorker: Worker = useMemo(() => new Worker(new URL(\"./fetchBooksWorker.ts\", import.meta.url)), []);\n    return getMemoizedFetchBooksWorker;\n};\n\nexport default useGetMemoizedFetchBooksWorker;\n","import { useEffect, useMemo } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { useDispatchAction, useMessage } from \"hooks\";\nimport { formatFetchedDataAsBooks } from \"js/utils\";\nimport { filtrate } from \"js/tableHelpers\";\nimport { FilteringCondition } from \"types\";\n\nimport Paths from \"routing\";\nimport useGetWorker from \"./useGetWorker\";\n\nexport const useFetchBooks = (arrayOfEndpoints: string[], controller: AbortController, filter: FilteringCondition | undefined) => {\n    // let controller = new AbortController();\n    const memoizedController: AbortController = useMemo(() => controller, []);\n    const navigate = useNavigate();\n\n    const { setIsLoading, setIsFromNetwork, storeBooks } = useDispatchAction();\n    const worker = useGetWorker();\n    const showMessage = useMessage();\n\n    useEffect(() => {\n        if (window.Worker && arrayOfEndpoints && arrayOfEndpoints.length && controller) {\n            setIsLoading(true);\n            worker.postMessage({ arrayOfEndpoints /*, controller*/ });\n            worker.onerror = function (e) {\n                showMessage.error(\"fetchBooksWorker wywołał błąd: \" + e.message);\n            };\n            worker.onmessage = (e: MessageEvent<any>) => {\n                if (e.data.errors) {\n                    showMessage.error(\"Podczas pobierania conajmniej jednej książki wystąpił błąd:\" + e.data.errors[0] + \" Łącznie błędów: \" + e.data.errors.length);\n                }\n                if (e.data.books) {\n                    const formattedBooks = filtrate(formatFetchedDataAsBooks([...e.data.books]), filter);\n                    storeBooks(formattedBooks);\n                    setIsFromNetwork(true);\n                    showMessage.success(`Poprawnie pobrano ${formattedBooks.length.toString()} książek`);\n                    navigate(Paths.books);\n                }\n                if (!e.data.books && !e.data.errors.length) {\n                    showMessage.warning(\"Nie znaleziono książek spełniających podane kryteria\"); //świadomie rezygnuję z przekierowania do strony paths.error\n                }\n\n                controller?.abort();\n                setIsLoading(false);\n            };\n        } else {\n        }\n        return () => controller?.abort();\n    }, [worker, arrayOfEndpoints, memoizedController, filter]);\n};\n\nexport default useFetchBooks;\n","import * as React from \"react\";\r\nimport uuid from \"react-uuid\";\r\n\r\nimport { shallowEqual, useSelector } from \"react-redux\";\r\nimport { useFormik } from \"formik\";\r\n\r\nimport { FavoriteButton, SearchField } from \"./components\";\r\nimport { createFilter, createTotalNumberURL, createBooksURL, validateInput } from \"./utils\";\r\nimport { Alert, Button, LogoFactory } from \"components\";\r\nimport { useEnhancedState, useGetBooks, useGetEndpoints, useTypedSelector } from \"hooks\";\r\nimport { BookForm, PageContainer, SearchButtons, SearchInputs } from \"pages/styled\";\r\nimport { SearchFormValues, SearchPageField, searchPageFieldPlaceholderMap, initialValues, initialValidationState } from \"./utils/model\";\r\nimport { isOnlineSelector } from \"js/redux/reducers/onlineReducer\";\r\nimport { BooksState } from \"types\";\r\nimport useFetchBooks from \"hooks/useFetchBooks.ts\";\r\n\r\nexport const SearchPage = () => {\r\n    const formID = uuid();\r\n\r\n    const [validated, setValidated] = React.useState(initialValidationState);\r\n    const [booksURL, setBooksURL] = React.useState(\"\");\r\n    const [countURL, setCountURL] = React.useState(\"\");\r\n    const [filter, setFilter] = useEnhancedState<undefined | BooksState[\"filter\"]>(undefined);\r\n\r\n    const isLoading = useTypedSelector(state => state.loading.isLoading, shallowEqual);\r\n    const isOnline = useSelector(isOnlineSelector);\r\n    // const getBooks = useGetBooks();\r\n    const endpoints = useGetEndpoints(countURL, booksURL);\r\n    let controller = new AbortController();\r\n    useFetchBooks(endpoints, controller, filter);\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n\r\n    const { values, handleSubmit, getFieldProps, handleReset } = useFormik({\r\n        initialValues,\r\n        onSubmit(formValues: SearchFormValues) {\r\n            const isValidated = validateInput(formValues);\r\n            setValidated(isValidated);\r\n            if (isValidated.isValid) {\r\n                setBooksURL(createBooksURL(formValues));\r\n                setCountURL(createTotalNumberURL(formValues));\r\n                setFilter(createFilter(formValues as Partial<SearchFormValues>));\r\n            }\r\n        },\r\n    });\r\n\r\n    const isFormEmpty = React.useCallback(() => {\r\n        return Object.values(values).join(\"\") === \"\";\r\n    }, [values]);\r\n\r\n    const clearFormAndValidation: React.MouseEventHandler<HTMLButtonElement> = React.useCallback(() => {\r\n        setValidated(initialValidationState);\r\n        handleReset(null);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n    // React.useEffect(() => {\r\n    //     let controller = new AbortController();\r\n\r\n    //     if (endpoints && endpoints.length) {\r\n    //         getBooks(endpoints, controller, filter);\r\n    //     }\r\n\r\n    //     return () => controller?.abort();\r\n    // }, [endpoints, filter]);\r\n\r\n    return (\r\n        <>\r\n            <PageContainer maxWidth={false} disableGutters={true} sx={{ alignItems: \"unset\" }}>\r\n                <LogoFactory />\r\n                <Alert shouldRender={!validated.isValid} alertMessage={validated.message} />\r\n                <BookForm id={formID}>\r\n                    <SearchInputs>\r\n                        {Object.values(SearchPageField).map((fieldName: SearchPageField) => (\r\n                            <SearchField key={uuid()} isDisabled={isLoading} label={searchPageFieldPlaceholderMap[fieldName]} {...getFieldProps(fieldName)} />\r\n                        ))}\r\n                    </SearchInputs>\r\n                    <SearchButtons>\r\n                        <Button form={formID} disabled={isLoading || isFormEmpty() || !isOnline} onClick={handleSubmit as unknown as React.MouseEventHandler<HTMLButtonElement>} className=\"button--ok\" type=\"submit\">\r\n                            Szukaj\r\n                        </Button>\r\n\r\n                        <Button disabled={isLoading || isFormEmpty()} onClick={clearFormAndValidation} className=\"button--problem\" type=\"reset\">\r\n                            Wyczyść\r\n                        </Button>\r\n\r\n                        <FavoriteButton />\r\n                    </SearchButtons>\r\n                </BookForm>\r\n            </PageContainer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SearchPage;\r\n"],"names":["connect","state","isLoading","loading","dispatch","fetchFromFavorites","booksRetrievedFromFavorites","FilteredStorage","item","kind","FAVORITE_BOOK_IDENTIFIER","getAll","storeBooks","setIsFromNetwork","error","errorMessage","Error","message","showError","isError","props","navigate","useNavigate","favoriteBooks","useFavoriteBooks","_jsx","Button","disabled","areNotEmpty","className","onClick","Paths","books","children","mouseEnterHandler","event","target","focus","Placeholders","isDisabled","label","name","otherProps","_objectWithoutProperties","_excluded","Tooltip","role","title","placement","TextField","_objectSpread","concat","id","size","variant","onMouseEnter","PATH","MAX_RESULTS","START_INDEX","buildURL","fields","keyword","BOOK_FIELDS","searchKeys","inauthor","authors","intitle","subject","stringifyKeys","fp","element","join","SearchPageField","initialSearchFields","SearchableFields","placeholder","SearchFields","_classCallCheck","this","_createClass","key","value","str","filter","get","result","obj","searchPageFieldPlaceholderMap","_searchPageFieldPlace","_defineProperty","AUTHORS","TITLE","SUBJECT","KEYWORD","initialValues","_initialValues","initialValidationState","isValid","validationResult","pickBy","isEmpty","length","test","searchFields","getPlaceholder","push","property","useMemo","Worker","URL","arrayOfEndpoints","controller","memoizedController","_useDispatchAction","useDispatchAction","setIsLoading","worker","useGetWorker","showMessage","useMessage","useEffect","window","postMessage","onerror","e","onmessage","data","errors","formattedBooks","filtrate","formatFetchedDataAsBooks","_toConsumableArray","success","toString","warning","abort","formID","uuid","_React$useState","React","_React$useState2","_slicedToArray","validated","setValidated","_React$useState3","_React$useState4","booksURL","setBooksURL","_React$useState5","_React$useState6","countURL","setCountURL","_useEnhancedState","useEnhancedState","undefined","_useEnhancedState2","setFilter","useTypedSelector","shallowEqual","isOnline","useSelector","isOnlineSelector","endpoints","useGetEndpoints","AbortController","useFetchBooks","_useFormik","useFormik","onSubmit","formValues","isValidated","validateInput","createBooksURL","createTotalNumberURL","createFilter","values","handleSubmit","getFieldProps","handleReset","isFormEmpty","Object","clearFormAndValidation","_Fragment","_jsxs","PageContainer","maxWidth","disableGutters","sx","alignItems","LogoFactory","Alert","shouldRender","alertMessage","BookForm","SearchInputs","map","fieldName","SearchField","SearchButtons","form","type","FavoriteButton"],"sourceRoot":""}