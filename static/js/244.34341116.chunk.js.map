{"version":3,"file":"static/js/244.34341116.chunk.js","mappings":"yBAAO,ICYP,EAJgC,SAACA,GAC7B,OAAOC,KAAKC,KAAKF,EAAIG,ODRK,ECS9B,ECSA,EATiC,SAACC,EAAeC,GAC7C,IAAMC,EAAQC,EAAiBF,GAC3BD,EAAQE,IAAOF,EAAQE,GAC3B,IAAME,EFZoB,GEYMJ,EAAQ,GAClCK,EAAOD,EFba,EEaYH,EAAUF,OAASE,EAAUF,OAASK,EFblD,EEe1B,OAAOH,EAAUK,MAAMF,EAAOC,EAClC,ECXAE,KAAKC,UAAY,SAACC,GACd,IAAMC,EAAOC,EAAkBF,EAAEC,KAAKE,WAAYH,EAAEC,KAAKG,OAEzDN,KAAKO,YAAYJ,EACrB,C","sources":["config.ts","js/BooksManager/tableHelpers/getNumberOfPages.ts","js/BooksManager/tableHelpers/getSinglePageData.ts","hooks/useGetTableData/getTableDataWorker.ts"],"sourcesContent":["export const sourceGoogleFields = [\"inauthor\", \"intitle\", \"subject\"];\r\nexport const ITEMS_PER_PAGE = 5;\r\nexport const GOOGLE_API = \"https://www.googleapis.com/books/v1/volumes/\";\r\n\r\nexport const DETAILS_FIELDS =\r\n    \"?fields = volumeInfo/title, volumeInfo/imageLinks/smallThumbnail/linkToCover,volumeInfo/authors, volumeInfo/publisher, volumeInfo/publishedDate, volumeInfo/language,volumeInfo/pageCount, volumeInfo/categories,volumeInfo/description, volumeInfo/industryIdentifiers, volumeInfo/printType, saleInfo/saleability, saleInfo/isEbook, saleInfo/listPrice, saleInfo/retailPrice, saleInfo/buyLink, accessInfo/webReaderLink, accessInfo/textToSpeechPermission\";\r\nexport const BOOK_FIELDS = \"&fields= items(id, volumeInfo/title, volumeInfo/authors, volumeInfo/publishedDate, volumeInfo/language, volumeInfo/categories,volumeInfo/subtitle )\";\r\nexport const FAVORITE_FIELDS = \"?fields= id,kind, volumeInfo/title, volumeInfo/authors, volumeInfo/publishedDate, volumeInfo/language, volumeInfo/categories,volumeInfo/subtitle\";\r\n\r\nexport const FAVORITE_BOOK_IDENTIFIER = \"books#volume\";\r\n\r\nexport const MAX_RESULTS = 40;\r\n// export const FAVORITE_BOOK_IDENTIFIER = { kind: \"books#volume\" };\r\n","import { BooksState } from \"types\";\r\nimport { ITEMS_PER_PAGE } from \"config\";\r\n\r\n/**\r\n * calculates number of pages which is later applied in pagination\r\n * @param ary\r\n * @returns number of pages as integer\r\n */\r\nexport const getNumberOfPages = (ary: BooksState[\"books\"]): number => {\r\n    return Math.ceil(ary.length / ITEMS_PER_PAGE);\r\n};\r\n\r\nexport default getNumberOfPages;\r\n","import { BooksState } from \"types\";\r\nimport { ITEMS_PER_PAGE } from \"config\";\r\nimport getNumberOfPages from \"./getNumberOfPages\";\r\n\r\n/**\r\n * extracts from all data a part being given page content\r\n * @param index index of first element to be extracted in the array\r\n * @param dataArray array with data\r\n * @returns array with rows being content of current page\r\n */\r\nexport const getSinglePageData = (index: number, dataArray: BooksState[\"books\"]): BooksState[\"books\"] => {\r\n    const limit = getNumberOfPages(dataArray);\r\n    if (index > limit) index = limit;\r\n    const first = ITEMS_PER_PAGE * (index - 1);\r\n    const last = first + ITEMS_PER_PAGE > dataArray.length ? dataArray.length : first + ITEMS_PER_PAGE;\r\n\r\n    return dataArray.slice(first, last);\r\n};\r\n\r\nexport default getSinglePageData;\r\n","/* eslint-disable no-restricted-globals */\n\nimport getSinglePageData from \"js/BooksManager/tableHelpers/getSinglePageData\";\n\nimport { GetTableDataParams } from \"types\";\n\nself.onmessage = (e: MessageEvent<GetTableDataParams>) => {\n    const data = getSinglePageData(e.data.pageNumber, e.data.books);\n\n    self.postMessage(data);\n};\n\nexport {};\n"],"names":["ary","Math","ceil","length","index","dataArray","limit","getNumberOfPages","first","last","slice","self","onmessage","e","data","getSinglePageData","pageNumber","books","postMessage"],"sourceRoot":""}